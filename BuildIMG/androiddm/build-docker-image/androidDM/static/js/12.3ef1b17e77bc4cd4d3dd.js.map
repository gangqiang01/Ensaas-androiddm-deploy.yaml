{"version":3,"sources":["webpack:///./src/components/restfulapi/getRepoWinPackageApi.js","webpack:///src/components/deploy/windowscontroldetails/history.vue","webpack:///./src/components/deploy/windowscontroldetails/history.vue?2041","webpack:///./src/components/deploy/windowscontroldetails/history.vue","webpack:///src/components/deploy/windowscontroldetails/single.vue","webpack:///./src/components/deploy/windowscontroldetails/single.vue?747a","webpack:///./src/components/deploy/windowscontroldetails/single.vue","webpack:///src/components/deploy/windowscontroldetails/batch.vue","webpack:///./src/components/deploy/windowscontroldetails/batch.vue?f8ca","webpack:///./src/components/deploy/windowscontroldetails/batch.vue","webpack:///src/components/deploy/windowscontrol.vue","webpack:///./src/components/deploy/windowscontrol.vue?ac09","webpack:///./src/components/deploy/windowscontrol.vue"],"names":["getRepoWinPkgsByTypeApi","type","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default","a","resolve","reject","data","getRepoServerApi","then","repoUrl","getRepoAppUrl","repoApiGet","catch","error","response","windowscontroldetails_history","name","pkgStatusHistoryTableList","isshow","limit","dataCount","currentPage","multipleSelection","isShowBtnGroup","clearLoading","batchDeleteAppStatusHistory","appStatusApi","intervalTime","isInterval","listLoading","singleWinPkgType","constant","batchWinPkgType","statusArray","components","btnGroup","props","statusType","default","String","selectedAgentId","groupname","methods","selectItem","val","this","checkSelectable","row","status","handleCurrentChange","intervalGetPkgStatusHistory","deleteHistory","aisid","_this","_g","swalInfoDo","$t","result","Object","handleResponse","res","$swal","button","handleError","checkAppStatusData","getAppStatusHistoryByGroupname","_this2","console","length","assignAppStatusData","getAppStatusHistoryBydevid","_this3","prototype","toString","call","count","isFinish","$emit","forEach","window","clearInterval","timer","_this4","setInterval","filterStatus","value","isArray","resetAppSensor","sensorId","appdata","_this5","deviceStatusApi","activeName","reinstall","appItem","_this6","taskname","projectname","pkgname","version","versionname","downloadpath","address","tool","versioncode","target","deviceId","isSuccess","clearAll","_this7","initData","created","beforeDestroy","watch","deploy_windowscontroldetails_history","render","_vm","_h","$createElement","_c","_self","directives","rawName","expression","ref","staticStyle","width","attrs","tooltip-effect","default-sort","prop","order","header-cell-style","background","color","on","selection-change","filter-change","min-width","selectable","_v","label","_e","scopedSlots","_u","key","fn","scope","_s","_f","ts","column-key","filters","text","filter-placement","height","src","__webpack_require__","alt","staticClass","errorcode","align","size","click","$event","disabled","selectedData","isDelete","isMove","tid","delApi","layout","page-size","current-page","total","current-change","staticRenderFns","components_deploy_windowscontroldetails_history","normalizeComponent","ssrContext","single","pkgTableData","exeTableData","defaultImg","keywords","zipKeywords","isSingleMode","Boolean","isOffline","pkgHistory","getSensorStatus","lwm2mMap","obj","pkgManagementInfoArray","devicePkgArray","content","allPkgData","JSON","parse","uninstallObj","filename","reid","push","getRepoPkgs","appname","removeObjInArray","originData","rem_pkg_val","obj_val","index","splice","InstallPkgManagementInfo","UpgradePkgManagementInfo","getRepoWinPackageApi","deviceapp_val","indexOf","pop","cpr_version","productname","reverse","filterType","actionAppSensor","cid","undefined","swalWarnDo","willfunc","openGlobalLoading","$refs","setAppSensor","setSensorVal","isFinished","appAction","selectedAppData","setsensorval","pkgdata","Date","getTime","getSrc","serverConfigApi","startApp","stopApp","enableApp","disableApp","handleClick","tab","computed","isShowSearchInput","windowscontroldetails_single","placeholder","model","callback","$$v","aria-hidden","tab-click","slot","filter","toLowerCase","includes","onerror","sortable","filter-method","deploy_windowscontroldetails_single","single_normalizeComponent","batch","dialogTasknameVisible","pkgStatusForm","rules","required","validator","rule","RegExp","test","Error","trigger","disableAppArray","isShowOverview","win_taskname","success","installing","failed","selectedAgentsData","Array","uninstallPkgObj","installPkgManagementInfo","upgradePkgManagementInfo","log","batchSetAppSensor","storage","batchinstallPkg","validate","valid","apkDownloadAddress","selectBatchinstallPkg","initPkgInfo","getBatchAppStatusCount","fail","windowscontroldetails_batch","getStatusCount","visible","close-on-click-modal","update:visible","close","label-width","autocomplete","$set","trim","deploy_windowscontroldetails_batch","batch_normalizeComponent","windowscontrol","isDisabledOffDev","groupType","windows","groupTypeArray","selectDevice","select_device","selectGroup","select_group","modeSwitch","mode_switch","singleControl","batchControl","getDeviceOption","getGroupOption","changeMode","getGroupName","isDisabled","isOfflineDev","deploy_windowscontrol","mode-status","select-getDeviceOptions","select-getGroupName","select-device","windowscontrol_Component","windowscontrol_normalizeComponent","__webpack_exports__"],"mappings":"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","file":"static/js/12.3ef1b17e77bc4cd4d3dd.js","sourcesContent":["import {repoApiGet} from '@/assets/js/baseApi'\nimport {getRepoServerApi} from \"../restfulapi/serverConfigApi\"\n\nlet getRepoWinPkgsApi = function(){\n    return new Promise((resolve, reject) => {\n        getRepoServerApi().then((repoUrl) => {\n            let getRepoAppUrl =  repoUrl + \"/repoexe\";\n            repoApiGet(getRepoAppUrl, \"\").then((data) => {\n                resolve(data);\n            }).catch((error) => {\n                resolve(error.response);\n            })\n        })\n    })\n}\n\nlet getRepoWinPkgsByTypeApi = function(type){\n    return new Promise((resolve, reject) => {\n        let data = {\n            type\n        }\n        getRepoServerApi().then((repoUrl) => {\n            let getRepoAppUrl =  repoUrl + \"/exeByType\";\n            repoApiGet(getRepoAppUrl, data).then((data) => {\n                resolve(data);\n            }).catch((error) => {\n                resolve(error.response);\n            })\n        })\n    })\n}\nexport {\n    getRepoWinPkgsApi,\n    getRepoWinPkgsByTypeApi\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/restfulapi/getRepoWinPackageApi.js","<template>\n    <div>\n        <el-table\n            :data=\"pkgStatusHistoryTableList\"\n            tooltip-effect=\"dark\"\n            style=\"width: 100%\"\n            @selection-change=\"selectItem\"\n            @filter-change=\"filterStatus\"\n            :default-sort = \"{prop: 'ts', order: 'descending'}\"\n            ref=\"pkgStatusHistoryTable\"\n            v-loading=\"listLoading\" \n            :header-cell-style=\"{background:'#fafafa',color:'#606266'}\"\n            >\n            <el-table-column\n            type=\"selection\"\n            min-width=\"50\"\n            :selectable=\"checkSelectable\">\n            </el-table-column>\n\n            <el-table-column\n            prop=\"devname\"\n            :label=\"$t('winPkgControl.deviceName')\"\n            min-width=\"120\"\n            >\n            </el-table-column>\n\n            <el-table-column\n            prop=\"taskname\"\n            :label=\"$t('winPkgControl.taskName')\"\n            min-width=\"120\"\n            v-if=\"statusType == batchWinPkgType\"\n            >\n            </el-table-column>\n\n            <el-table-column\n            prop=\"pkgname\"\n            :label=\"$t('winPkgControl.projectName')\"\n            min-width=\"140\"\n            >\n            </el-table-column>\n\n            <el-table-column\n            prop=\"versionname\"\n            :label=\"$t('winPkgControl.version')\"\n            min-width=\"100\"\n            >\n            </el-table-column>\n            \n            <el-table-column\n            :label=\"$t('winPkgControl.beginTime')\"\n            min-width=\"130\"\n            prop=\"ts\"\n                >\n                <template slot-scope=\"scope\">\n                    {{scope.row.ts|time}}\n                </template>\n            </el-table-column>\n\n            <el-table-column\n            prop=\"target\"\n            :label=\"$t('winPkgControl.function')\"\n            min-width=\"120\"\n            >\n                <template slot-scope=\"scope\">\n                    {{scope.row.target|appStatusFunction}}\n                </template>\n            </el-table-column>\n            <el-table-column\n            column-key=\"status\"\n            prop=\"status\"\n            :label=\"$t('winPkgControl.installStatus')\"\n            min-width=\"140\"\n            :filters=\"[{ text: $t('global.success'), value: 2 }, { text: $t('global.failed'), value: 1 }, {text: $t('global.running'), value: 0}]\"\n            filter-placement=\"bottom-end\"\n            >\n                <template slot-scope=\"scope\">\n                    <img src=\"@/assets/imgs/loading1.gif\" alt=\"\" style=\"width:50px;height:10px;\"v-if=\"scope.row.status==0\">\n                    <span v-if=\"scope.row.status==2\" class=\"badge bg-green\">{{$t('global.success')}}</span>\n                    <span v-if=\"scope.row.status==1\" class=\"badge bg-DimGray\">{{$t('global.failed')}}</span>\n                    <!-- {{scope.row.upstatus|AppStatus}} -->\n                </template>\n            </el-table-column>\n\n            <el-table-column\n            :label=\"$t('winPkgControl.errorStatus')\"\n            min-width=\"100\"\n            >\n                <template slot-scope=\"scope\">\n                    {{(\"\"+scope.row.errorcode)|appErrorStatus}}\n                </template>\n            </el-table-column>\n\n            <el-table-column\n            :label=\"$t('winPkgControl.action')\"\n            min-width=\"175\"\n            align=\"center\">\n                <template slot-scope=\"scope\">\n                    <div>\n                        <el-button-group>\n                            <!-- :disabled=\"scope.row.status==0\" -->\n                            <el-button \n                                size=\"mini\" \n                                type=\"danger\"\n                                @click=\"deleteHistory(scope.row.aisid)\"\n                                \n                                >\n                                    {{$t('global.delete')}}\n                            </el-button>\n                            <el-button \n                                size=\"mini\" \n                                type=\"primary\"\n                                @click=\"reinstall(scope.row)\"\n                                :disabled=\"scope.row.status!=1\"\n                                >\n                                    {{$t('winPkgControl.repeat')}}\n                            </el-button>\n                        </el-button-group>\n                    </div>\n                </template>\n            </el-table-column>\n\n        </el-table>\n\n        <btn-group \n        :selectedData=\"multipleSelection\" \n        :isDelete=\"true\" \n        :isMove=\"false\" \n        tid=\"aisid\" \n        :delApi=\"batchDeleteAppStatusHistory\" \n        @result=\"isSuccess\" \n        v-show=\"isShowBtnGroup\"\n        class=\"fl m-t-10 cf\">\n        </btn-group>\n\n        <el-button \n        v-loading=\"clearLoading\" \n        size=\"small\" \n        @click=\"clearAll()\" \n        type=\"primary\" \n        class=\"fl m-t-10 cf m-l-10\"\n            v-show=\"isShowBtnGroup\">\n        {{$t('winPkgControl.clearAll')}}\n        </el-button>\n\n        <div class=\"m-t-10 cf fr\">\n            <el-pagination\n            @current-change=\"handleCurrentChange\"\n            layout=\"prev, pager, next\"\n            :page-size=\"limit\"\n            :current-page=\"currentPage\"\n            :total=\"dataCount\"\n            v-show=\"isshow\"\n            background\n            >\n            </el-pagination>\n            \n        </div> \n        \n       \n    </div>\n</template>\n<script>\n    import {winPkgControl} from '@/assets/js/lwm2mMap'\n    import {reExecDeviceStatus} from '@/components/restfulapi/deviceStatusApi';\n    import{\n    getAppStatusByTypeApi, \n    batchDeleteAppStatusHistoryApi, \n    deleteAppStatusHistoryApi, \n    deleteAppStatusHistoryAllByTypeApi,\n    deleteAppStatusHistoryAllApi,\n    getAppStatusOverviewApi,\n    getAppStatusByTypeAndDevIdApi, \n    getAppStatusByTypeAndGroupApi,\n    getAppStatusByTypeAndPageInGroupApi,\n    getAppStatusByTypeAndPageAndStatusInGroupApi,\n    getAppStatusByTypeAndPageInDevIdApi,\n    getAppStatusByTypeAndPageAndStatusInDevIdApi,\n    deleteAppStatusHistoryAllByDevIdAndTypeApi,\n    deleteAppStatusHistoryAllByGroupAndTypeApi\n    } from \"@/components/restfulapi/appStatusApi\"\n    import {setLocal, getLocal, getSession, checkSession, setSession} from \"../../../assets/js/storage\"\n\n    import handleResponse from '@/components/restfulapi/handleResponse'\n    import btnGroup from \"../../../common/btn-group\";\n    import {singleWinPkgType, batchWinPkgType} from \"../../../assets/js/constant\"\n\nexport default {\n    name: 'winPkgControlHistory',\n    data() {\n        return {\n            pkgStatusHistoryTableList: [],\n            isshow: false,\n            limit: 10,\n            dataCount: 0,\n            currentPage: 1,\n            multipleSelection: [],\n            isShowBtnGroup: false,\n            clearLoading: false,\n            batchDeleteAppStatusHistory:  batchDeleteAppStatusHistoryApi,\n            intervalTime: 7000,\n\n            isInterval: false,\n            listLoading: false,\n            singleWinPkgType,\n            batchWinPkgType,\n            statusArray: [],\n        }\n    },\n\n    components: {\n        btnGroup,\n    },\n\n    props: {\n        statusType: {\n            default: batchWinPkgType,\n            type: String\n        },\n\n        selectedAgentId: {\n            default: \"\",\n            type: String\n        },\n\n        groupname: {\n            default: \"\",\n            type: String\n        }\n    },\n    methods: {\n        selectItem(val) {\n            this.multipleSelection = val;\n        },\n\n        checkSelectable(row) {\n            return !row.status==0;\n        },\n\n        handleCurrentChange(currentPage){\n            if(currentPage){\n                this.currentPage = currentPage;\n            }else{\n                this.currentPage = 1\n            }\n            this.intervalGetPkgStatusHistory();\n        },\n\n        deleteHistory(aisid){\n            _g.swalInfoDo(this.$t('global.areYouSure'), this.$t('global.delete'), this.$t('global.confirm'), this.$t('global.cancel')).then((result) => {\n                if(result){\n                    this.listLoading = true;\n                    deleteAppStatusHistoryApi(aisid).then((data) => {\n                        this.listLoading = false;\n                        handleResponse(data, (res) => {\n                            if(res.status === \"CHANGED\"){\n                                this.$swal(\"\", this.$t('global.success'), \"success\", {button: this.$t('global.confirm')}).then(() => {\n                                        this.intervalGetPkgStatusHistory();\n                                })\n                            }else{\n                                _g.handleError(res);\n                            }\n                        })\n                    })\n                }\n            }) \n        },\n\n        checkAppStatusData(){\n            if(this.statusType == batchWinPkgType){\n                getAppStatusByTypeAndGroupApi(this.groupname, this.statusType)\n            }else{\n                getAppStatusByTypeAndDevIdApi(this.selectedAgentId, this.statusType)\n            }\n        },\n\n        getAppStatusHistoryByGroupname(){\n            if(!this.groupname){\n                console.error(\"[getAppStatusHistoryByGroupname]groupname is empty\")\n            }\n            if(this.isInterval === false){\n                this.listLoading = true;\n            }\n            \n            if(this.statusArray.length > 0){\n                getAppStatusByTypeAndPageAndStatusInGroupApi(this.groupname, this.statusType, this.currentPage, this.limit, this.statusArray).then((data) => {\n                    this.listLoading = false;\n                    handleResponse(data, (res) => {\n                        this.assignAppStatusData(res);\n                    })\n                })\n            }else{\n                getAppStatusByTypeAndPageInGroupApi(this.groupname, this.statusType, this.currentPage, this.limit).then((data) => {\n                    this.listLoading = false;\n                    handleResponse(data, (res) => {\n                        this.assignAppStatusData(res);\n                    })\n                })\n            }\n            \n        },\n\n        getAppStatusHistoryBydevid(){\n            if(!this.selectedAgentId){\n                console.error(\"[getAppStatusHistoryBydevid]selectedAgentId is empty\")\n            }\n\n            if(this.isInterval === false){\n                this.listLoading = true;\n            }\n            if(this.statusArray.length > 0){\n                getAppStatusByTypeAndPageAndStatusInDevIdApi(this.selectedAgentId, this.statusType, this.currentPage, this.limit, this.statusArray).then((data) => {\n                    this.listLoading = false;\n                    handleResponse(data, (res) => {\n                        this.assignAppStatusData(res);\n                    })\n                })\n            }else{\n                getAppStatusByTypeAndPageInDevIdApi(this.selectedAgentId, this.statusType, this.currentPage, this.limit).then((data) => {\n                    this.listLoading = false;\n                    handleResponse(data, (res) => {\n                        this.assignAppStatusData(res);\n                    })\n                })\n            }\n        },\n\n        assignAppStatusData(res){\n            if(Object.prototype.toString.call(res)  === '[object Object]'&& Object.prototype.toString.call(res.data) === '[object Array]'){\n                this.dataCount = res.count;\n                this.pkgStatusHistoryTableList = res.data\n                this.isshow = this.dataCount > this.limit;\n                this.isShowBtnGroup = this.dataCount > 0;\n                let isFinish = true;\n                if(this.statusType == batchWinPkgType){\n                    this.$emit(\"getStatusCount\")\n                }\n\n                res.data.forEach((val) => {\n                    if(val.status == 0){\n                        isFinish = false;\n                    }\n                })\n                if(isFinish){\n                    \n                    this.$emit(\"isFinished\");\n                    \n                    window.clearInterval(_g.timer);\n                    _g.timer = null;\n                }\n            }else{\n                window.clearInterval(_g.timer);\n                _g.timer = null;\n            }\n        },\n\n        intervalGetPkgStatusHistory(){\n            if(this.statusType == batchWinPkgType){\n                this.getAppStatusHistoryByGroupname();\n                if(_g.timer === null){\n                    _g.timer = window.setInterval(() => {\n                        this.getAppStatusHistoryByGroupname();\n                        this.isInterval = true;\n                    },this.intervalTime)\n                } \n            }else{\n                this.getAppStatusHistoryBydevid();\n                if(_g.timer === null){\n                    _g.timer = window.setInterval(() => {\n                        this.getAppStatusHistoryBydevid();\n                        this.isInterval = true;\n                    },this.intervalTime)\n                }\n            }\n        },\n\n\n        filterStatus(value){\n            this.statusArray = value.status;\n            this.currentPage = 1;\n            if(_g.isArray(this.statusArray)){\n                this.intervalGetPkgStatusHistory();\n            }\n        },\n\n        resetAppSensor(sensorId, selectedAgentId, appdata){\n            this.listLoading = true;\n            reExecDeviceStatus(selectedAgentId, sensorId, appdata).then((data) => {\n                this.listLoading = false;\n                handleResponse(data, (res) => {\n                    if(res.status == \"CHANGED\"){\n                        this.activeName = \"appStatusHistory\";\n                        this.currentPage = 1;\n                        this.intervalGetPkgStatusHistory();\n                    }else{\n                        _g.handleError(res)\n                    }\n                })\n                \n            })\n            \n        },\n\n        reinstall(appItem){\n            _g.swalInfoDo(this.$t('global.areYouSure'), this.$t('winPkgControl.repeat'), this.$t('global.confirm'), this.$t('global.cancel')).then((result) => {\n                if(result){\n                    let appdata = {\n                        taskname: appItem.taskname,\n                        projectname: appItem.pkgname,\n                        version: appItem.versionname,\n                        downloadpath: appItem.address,\n                        tool: appItem.versioncode,\n                    }\n                    this.resetAppSensor(appItem.target, appItem.deviceId, appdata);\n                }\n            })\n        },\n\n        //delete appstatus $emit\n        isSuccess(result){\n            if(result){\n                this.intervalGetPkgStatusHistory();\n            }\n        },\n\n         //clear All history\n        clearAll(){\n            _g.swalInfoDo(this.$t('global.areYouSure'), this.$t('global.clearAll'), this.$t('global.confirm'), this.$t('global.cancel')).then((result) => {\n                if(result){\n                    this.clearLoading = true;\n                    if(this.statusType == batchWinPkgType){\n                        deleteAppStatusHistoryAllByGroupAndTypeApi(this.groupname, this.statusType).then((data) => {\n                            this.clearLoading = false;\n                            handleResponse((data), (res) => {\n                                if(res.status === \"CHANGED\"){\n                                    this.$swal(\"\", this.$t('global.success'), \"success\", {button: this.$t('global.confirm')}).then(() => {\n                                            this.intervalGetPkgStatusHistory();\n                                    })\n                                }else{\n                                    _g.handleError(res);\n                                }\n                            })\n                        })\n                    }else{\n                        deleteAppStatusHistoryAllByDevIdAndTypeApi(this.selectedAgentId, this.statusType).then((data) => {\n                            this.clearLoading = false;\n                            handleResponse((data), (res) => {\n                                if(res.status === \"CHANGED\"){\n                                    this.$swal(\"\", this.$t('global.success'), \"success\", {button: this.$t('global.confirm')}).then(() => {\n                                            this.intervalGetPkgStatusHistory();\n                                    })\n                                }else{\n                                    _g.handleError(res);\n                                }\n                            })\n                        })\n                    }  \n                }\n            })\n\n        },\n\n        initData(){\n            this.pkgStatusHistoryTableList = [];\n            this.isShowBtnGroup= false;\n            this.isshow= false;\n            this.isInterval = false;\n            this.currentPage = 1;\n        }\n\n\n    },\n\n    created(){\n        if(this.statusType == batchWinPkgType){\n            this.$emit(\"getStatusCount\")\n        }\n    },\n    beforeDestroy() {\n         window.clearInterval(_g.timer);\n        _g.timer = null;\n    },\n\n    watch: {\n        groupname(val){\n            if(val){\n                this.initData();\n                this.checkAppStatusData();\n                this.intervalGetPkgStatusHistory();\n                \n            }  \n　　　　　},\n        selectedAgentId(val){\n            if(val){\n                this.initData();\n                this.checkAppStatusData();\n                this.intervalGetPkgStatusHistory();\n                \n            }  \n　　　　　},\n\n    },\n        \n}\n</script>\n<style lang=\"scss\" scoped>\n@import \"@/assets/css/colors.scss\";\n    .badge{\n        display: inline-block;\n        min-width: 10px;\n        padding: 5px 8px;\n        font-size: 12px;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: middle;\n        border-radius: 10px;\n    }\n\n    .el-loading-mask{\n        top: 60px !important;\n    }\n\n\n    \n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/deploy/windowscontroldetails/history.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('el-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.listLoading),expression:\"listLoading\"}],ref:\"pkgStatusHistoryTable\",staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.pkgStatusHistoryTableList,\"tooltip-effect\":\"dark\",\"default-sort\":{prop: 'ts', order: 'descending'},\"header-cell-style\":{background:'#fafafa',color:'#606266'}},on:{\"selection-change\":_vm.selectItem,\"filter-change\":_vm.filterStatus}},[_c('el-table-column',{attrs:{\"type\":\"selection\",\"min-width\":\"50\",\"selectable\":_vm.checkSelectable}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"devname\",\"label\":_vm.$t('winPkgControl.deviceName'),\"min-width\":\"120\"}}),_vm._v(\" \"),(_vm.statusType == _vm.batchWinPkgType)?_c('el-table-column',{attrs:{\"prop\":\"taskname\",\"label\":_vm.$t('winPkgControl.taskName'),\"min-width\":\"120\"}}):_vm._e(),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"pkgname\",\"label\":_vm.$t('winPkgControl.projectName'),\"min-width\":\"140\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"versionname\",\"label\":_vm.$t('winPkgControl.version'),\"min-width\":\"100\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"label\":_vm.$t('winPkgControl.beginTime'),\"min-width\":\"130\",\"prop\":\"ts\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_vm._v(\"\\n                \"+_vm._s(_vm._f(\"time\")(scope.row.ts))+\"\\n            \")]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"target\",\"label\":_vm.$t('winPkgControl.function'),\"min-width\":\"120\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_vm._v(\"\\n                \"+_vm._s(_vm._f(\"appStatusFunction\")(scope.row.target))+\"\\n            \")]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"column-key\":\"status\",\"prop\":\"status\",\"label\":_vm.$t('winPkgControl.installStatus'),\"min-width\":\"140\",\"filters\":[{ text: _vm.$t('global.success'), value: 2 }, { text: _vm.$t('global.failed'), value: 1 }, {text: _vm.$t('global.running'), value: 0}],\"filter-placement\":\"bottom-end\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [(scope.row.status==0)?_c('img',{staticStyle:{\"width\":\"50px\",\"height\":\"10px\"},attrs:{\"src\":require(\"@/assets/imgs/loading1.gif\"),\"alt\":\"\"}}):_vm._e(),_vm._v(\" \"),(scope.row.status==2)?_c('span',{staticClass:\"badge bg-green\"},[_vm._v(_vm._s(_vm.$t('global.success')))]):_vm._e(),_vm._v(\" \"),(scope.row.status==1)?_c('span',{staticClass:\"badge bg-DimGray\"},[_vm._v(_vm._s(_vm.$t('global.failed')))]):_vm._e()]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"label\":_vm.$t('winPkgControl.errorStatus'),\"min-width\":\"100\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_vm._v(\"\\n                \"+_vm._s(_vm._f(\"appErrorStatus\")((\"\"+scope.row.errorcode)))+\"\\n            \")]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"label\":_vm.$t('winPkgControl.action'),\"min-width\":\"175\",\"align\":\"center\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[_c('el-button-group',[_c('el-button',{attrs:{\"size\":\"mini\",\"type\":\"danger\"},on:{\"click\":function($event){_vm.deleteHistory(scope.row.aisid)}}},[_vm._v(\"\\n                                \"+_vm._s(_vm.$t('global.delete'))+\"\\n                        \")]),_vm._v(\" \"),_c('el-button',{attrs:{\"size\":\"mini\",\"type\":\"primary\",\"disabled\":scope.row.status!=1},on:{\"click\":function($event){_vm.reinstall(scope.row)}}},[_vm._v(\"\\n                                \"+_vm._s(_vm.$t('winPkgControl.repeat'))+\"\\n                        \")])],1)],1)]}}])})],1),_vm._v(\" \"),_c('btn-group',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isShowBtnGroup),expression:\"isShowBtnGroup\"}],staticClass:\"fl m-t-10 cf\",attrs:{\"selectedData\":_vm.multipleSelection,\"isDelete\":true,\"isMove\":false,\"tid\":\"aisid\",\"delApi\":_vm.batchDeleteAppStatusHistory},on:{\"result\":_vm.isSuccess}}),_vm._v(\" \"),_c('el-button',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.clearLoading),expression:\"clearLoading\"},{name:\"show\",rawName:\"v-show\",value:(_vm.isShowBtnGroup),expression:\"isShowBtnGroup\"}],staticClass:\"fl m-t-10 cf m-l-10\",attrs:{\"size\":\"small\",\"type\":\"primary\"},on:{\"click\":function($event){_vm.clearAll()}}},[_vm._v(\"\\n    \"+_vm._s(_vm.$t('winPkgControl.clearAll'))+\"\\n    \")]),_vm._v(\" \"),_c('div',{staticClass:\"m-t-10 cf fr\"},[_c('el-pagination',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isshow),expression:\"isshow\"}],attrs:{\"layout\":\"prev, pager, next\",\"page-size\":_vm.limit,\"current-page\":_vm.currentPage,\"total\":_vm.dataCount,\"background\":\"\"},on:{\"current-change\":_vm.handleCurrentChange}})],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?{\"id\":\"data-v-936758aa\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&index=0!./src/components/deploy/windowscontroldetails/history.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-936758aa\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=styles&index=0!./history.vue\")\n}\nvar normalizeComponent = require(\"!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./history.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./history.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-936758aa\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=template&index=0!./history.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-936758aa\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/deploy/windowscontroldetails/history.vue\n// module id = null\n// module chunks = ","<template>\n    <div v-show=\"isSingleMode\" class=\"p-r\">\n        <div class=\"search\" v-show=\"isShowSearchInput\"> \n            <el-input size=\"small\" class=\"w-250 m-l-10\" v-model=\"keywords\" :placeholder=\"$t('winPkgControl.keywordHolder')\" >  \n            </el-input>\n            <i class=\"fa fa-search search-icon\" aria-hidden=\"true\"></i>\n        </div>\n        <el-tabs v-model=\"activeName\" @tab-click=\"handleClick\">\n            <el-tab-pane name=\"winMarket\">\n                <span slot=\"label\">\n                    <i class=\"fa fa-sellsy m-r-5\" aria-hidden=\"listLoading\"></i>\n                    {{$t('winPkgControl.exePkgMarket')}}\n                </span>\n                <el-table\n                    :data=\"exeTableData.filter(data => !keywords || data.projectname.toLowerCase().includes(keywords.toLowerCase()))\"\n                    tooltip-effect=\"dark\"\n                    style=\"width: 100%\"\n                    v-loading=\"listLoading\"\n                    :header-cell-style=\"{background:'#fafafa',color:'#606266'}\"\n                    >\n\n                    <el-table-column\n                    label=\"\"\n                    width=\"100\"\n                    >\n                        <template slot-scope=\"scope\">\n                            <div>\n                                <img :src=\"getSrc(scope.row.reid)\" :onerror=\"defaultImg\" alt=\"no img\" style=\"width:52px\"/>\n                            </div>\n                        </template>\n                    </el-table-column>\n                    <el-table-column\n                    prop=\"projectname\"\n                    :label=\"$t('winPkgControl.projectName')\"\n                    min-width=\"120\"\n                    sortable\n                    >\n                    </el-table-column>\n                    <el-table-column\n                    prop=\"version\"\n                    :label=\"$t('winPkgControl.version')\"\n                    min-width=\"120\"\n                    sortable>\n                    </el-table-column>\n\n                    <el-table-column\n                    prop=\"type\"\n                    :label=\"$t('winPkgControl.action')\"\n                    min-width=\"120\"\n                    :filters=\"[{ text: $t('winPkgControl.uninstall'), value: 'uninstall' }, { text: $t('winPkgControl.install'), value: 'install' }, { text: $t('winPkgControl.upgrade'), value: 'upgrade' }]\"\n                    :filter-method=\"filterType\"\n                    filter-placement=\"bottom-end\"\n                    >\n                        <template slot-scope=\"scope\">\n                            <div>\n                                <span>\n                                    <el-button-group>\n                                        <el-button \n                                        size=\"small\" \n                                        type=\"danger\" \n                                        @click=\"appAction('uninstallExe', scope.row)\"\n                                        v-if=\"scope.row.type === 'uninstall'\"\n                                        :disabled=\"scope.row.type === 'uninstall'&&!scope.row.tool\"\n                                        >\n                                            {{$t('winPkgControl.uninstall')}}\n                                        </el-button>\n                                        <el-button \n                                        size=\"small\" \n                                        type=\"warning\" \n                                        @click=\"appAction('upgradeExe', scope.row)\" \n                                        v-if=\"scope.row.type === 'upgrade'\"\n                                        >\n                                            {{$t('winPkgControl.upgrade')}}\n                                        </el-button>\n                                        <el-button \n                                        size=\"small\" \n                                        type=\"primary\" \n                                        @click=\"appAction('installExe', scope.row)\" \n                                        v-if=\"scope.row.type === 'install'\"\n                                        >\n                                            {{$t('winPkgControl.install')}}\n                                        </el-button>\n                                    </el-button-group>\n                                </span>\n                            </div>\n                        </template>\n                    </el-table-column>\n                </el-table>\n            </el-tab-pane>\n            <el-tab-pane name=\"zipMarket\">\n                <span slot=\"label\">\n                    <i class=\"fa fa-sellsy m-r-5\" aria-hidden=\"listLoading\"></i>\n                    {{$t('winPkgControl.compressedPkgMarket')}}\n                </span>\n                <el-table\n                    :data=\"pkgTableData.filter(data => (!keywords || data.projectname.toLowerCase().includes(keywords.toLowerCase())))\"\n                    tooltip-effect=\"dark\"\n                    style=\"width: 100%\"\n                    v-loading=\"listLoading\"\n                    :header-cell-style=\"{background:'#fafafa',color:'#606266'}\"\n                    >\n\n                    <el-table-column\n                    label=\"\"\n                    width=\"100\"\n                    >\n                        <template slot-scope=\"scope\">\n                            <div>\n                                <img src=\"@/assets/imgs/package.png\"  alt=\"no img\" style=\"width:48px\" />\n                            </div>\n                        </template>\n                    </el-table-column>\n                    <el-table-column\n                    prop=\"filename\"\n                    :label=\"$t('linuxPkgControl.fileName')\"\n                    min-width=\"120\"\n                    >\n                    </el-table-column>\n                    <el-table-column\n                    prop=\"projectname\"\n                    :label=\"$t('winPkgControl.projectName')\"\n                    min-width=\"120\"\n                    sortable\n                    >\n                    </el-table-column>\n                    <el-table-column\n                    prop=\"version\"\n                    :label=\"$t('winPkgControl.version')\"\n                    min-width=\"120\"\n                    sortable>\n                    </el-table-column>\n\n                    <el-table-column\n                    prop=\"type\"\n                    :label=\"$t('winPkgControl.action')\"\n                    min-width=\"120\"\n                    :filters=\"[{ text: $t('winPkgControl.uninstall'), value: 'uninstall' }, { text: $t('winPkgControl.install'), value: 'install' }, { text: $t('winPkgControl.upgrade'), value: 'upgrade' }]\"\n                    :filter-method=\"filterType\"\n                    filter-placement=\"bottom-end\"\n                    >\n                        <template slot-scope=\"scope\">\n                            <div>\n                                <span>\n                                    <el-button-group>\n                                        <el-button \n                                        size=\"small\" \n                                        type=\"danger\" \n                                        @click=\"appAction('uninstallPkg', scope.row)\"\n                                        v-if=\"scope.row.type === 'uninstall'\"\n                                        >\n                                            {{$t('winPkgControl.uninstall')}}\n                                        </el-button>\n                                        <el-button \n                                        size=\"small\" \n                                        type=\"warning\" \n                                        @click=\"appAction('upgradePkg', scope.row)\" \n                                        v-if=\"scope.row.type === 'upgrade'\"\n                                        >\n                                            {{$t('winPkgControl.upgrade')}}\n                                        </el-button>\n                                        <el-button \n                                        size=\"small\" \n                                        type=\"primary\" \n                                        @click=\"appAction('installPkg', scope.row)\" \n                                        v-if=\"scope.row.type === 'install'\"\n                                        >\n                                            {{$t('winPkgControl.install')}}\n                                        </el-button>\n                                    </el-button-group>\n                                </span>\n                            </div>\n                        </template>\n                    </el-table-column>\n                </el-table>\n            </el-tab-pane>\n            <el-tab-pane name=\"pkgStatusHistory\">\n                <span slot=\"label\">\n                    <i class=\"fa fa-history m-r-5\" aria-hidden=\"true\"></i>\n                    {{$t('winPkgControl.winManagerHistory')}}\n                </span>\n                <pkg-history\n                :statusType=\"singleWinPkgType\"\n                ref=\"pkgHistory\"\n                @isFinished=\"isFinished\"\n                :selectedAgentId=\"selectedAgentId\"\n                >\n                </pkg-history>\n            </el-tab-pane>\n        </el-tabs>\n    </div>\n    \n</template>\n\n\n<script>\n    import {winPkgControl} from '@/assets/js/lwm2mMap'\n    import handleResponse from '@/components/restfulapi/handleResponse'\n    import {getDeviceStatus, setDeviceStatus, execDeviceStatus } from '@/components/restfulapi/deviceStatusApi';\n    import {getRepoWinPkgsApi, getRepoWinPkgsByTypeApi} from '../../../components/restfulapi/getRepoWinPackageApi';\n    import {getSession, checkSession, setSession } from '../../../assets/js/storage';\n    import {getRepoSrcApi} from \"../../restfulapi/serverConfigApi\"\n    import {singleWinPkgType, batchWinPkgType, winPkgExe, winPkgZip} from \"../../../assets/js/constant\";\n    import pkgHistory from \"./history\"\n\n    export default{\n        name: 'singlewinPkgControl',\n        data(){\n            return {\n                activeName: \"winMarket\",\n                pkgTableData: [],\n                exeTableData: [],\n                defaultImg: 'this.src=\"' + 'static/imgs/default_windows.png' + '\"',\n                //history\n                singleWinPkgType,\n                //card\n                listLoading: false,\n                keywords: '',\n                zipKeywords: \"\",\n            }\n        },\n\n        props: {\n            selectedAgentId: {\n                type: String,\n                default: \"\"\n            },\n            isSingleMode: {\n                type: Boolean,\n                default: true\n            },\n            //selectedAgent is offline\n            isOffline: {\n                type: Boolean,\n                default: false\n            }\n        },\n        components: {\n            pkgHistory,\n        },\n\n        methods:{\n            getSensorStatus(){\n                if(!this.isSingleMode) {\n                    console.error(\"Cannot operate in a batch mode\");\n                    return;\n                }\n                if(this.selectedAgentId == \"\"){\n                    console.error(\"selectAgentId is empty\");\n                    return;\n                }\n               \n                this.listLoading = true;\n                getDeviceStatus(this.selectedAgentId, winPkgControl[\"getExeInfo\"]).then((obj) => {\n                    let pkgManagementInfoArray = [];\n                    let devicePkgArray = [];\n                    this.listLoading = false;\n                    handleResponse(obj, (res) => {\n                        if(res.status == \"CONTENT\"){\n                            if(res.content.value){\n                                let allPkgData = JSON.parse(res.content.value);\n                                // let allPkgData = packageinfo.data;\n                                if(Object.prototype.toString.call(allPkgData) === \"[object Array]\" && allPkgData.length > 0){\n                                    allPkgData.forEach((val) => {\n                                        let uninstallObj = {\n                                            type: 'uninstall',\n                                            filename: \"\",\n                                            projectname: val.projectname,\n                                            tool: \"\",\n                                            version: val.version,\n                                            address: \"\",\n                                            reid: \"\",\n                                        };\n                                        pkgManagementInfoArray.push(uninstallObj);\n                                        devicePkgArray.push(uninstallObj);  \n                                    })\n                                }\n                            }\n                            this.getRepoPkgs(pkgManagementInfoArray, devicePkgArray, winPkgExe);  \n                        }\n                        \n                          \n                    })   \n                })\n\n                getDeviceStatus(this.selectedAgentId, winPkgControl[\"getPkgInfo\"]).then((obj) => {\n                    let pkgManagementInfoArray = [];\n                    let devicePkgArray = [];\n                    this.listLoading = false;\n                    handleResponse(obj, (res) => {\n                        if(res.status == \"CONTENT\"){\n                            let allPkgData = JSON.parse(res.content.value);\n                            if(Object.prototype.toString.call(allPkgData) === \"[object Array]\" && allPkgData.length > 0){\n                                allPkgData.forEach((val) => {\n                                    let uninstallObj = {\n                                        type: 'uninstall',\n                                        filename: val.pkgname,\n                                        projectname: val.appname,\n                                        tool: \"\",\n                                        version: val.version,\n                                        address: \"\",\n                                        reid: \"\",\n                                    };\n                                    pkgManagementInfoArray.push(uninstallObj);\n                                    devicePkgArray.push(uninstallObj);  \n                                })\n                            }\n                            this.getRepoPkgs(pkgManagementInfoArray, devicePkgArray, winPkgZip);  \n                        }\n                    })   \n                })\n            },\n            // Deletes an object of a particular value in array\n            removeObjInArray(originData, rem_pkg_val, version){\n                let res = false;\n                if(Object.prototype.toString.call(originData) === \"[object Array]\"){\n                    \n                    originData.forEach((obj_val, index) => {\n                        if(obj_val.projectname === rem_pkg_val&& obj_val.version === version){\n                            originData.splice(index ,1)\n                            res = true;\n                        }\n                    })\n                }else{\n                     console.error(\"data is not array\")\n                     \n                }\n                return res;\n            },\n            //get repo exe apps\n            getRepoPkgs(pkgManagementInfoArray, devicePkgArray, type){\n                if(\n                    Object.prototype.toString.call(pkgManagementInfoArray) != \"[object Array]\" ||\n                    Object.prototype.toString.call(devicePkgArray) != \"[object Array]\"\n                ){\n                    console.error(\"getRepoPkgs　parameter is not array\")\n                    return;\n                }\n                let token;\n                let InstallPkgManagementInfo = {};\n                let UpgradePkgManagementInfo = {};\n                this.listLoading = true;\n                getRepoWinPkgsByTypeApi(type).then((data) => {\n                    this.listLoading = false;\n                    handleResponse(data, (res) => {\n                       if(res.status === \"success\"){\n                            let installappopt = \"\";\n                            let upgradeappopt = \"\";\n                            let lastVersionCode = [];\n                            if(Object.prototype.toString.call(res.data) === \"[object Array]\"){\n                                res.data.forEach((val) => {\n\n                                    InstallPkgManagementInfo = {\n                                        type : \"install\", \n                                        filename: val.filename, \n                                        projectname: val.projectname, \n                                        tool: val.tool,\n                                        version: val.version, \n                                        address: val.address,\n                                        reid: val.reid\n                                    };\n                                    pkgManagementInfoArray.push(InstallPkgManagementInfo);\n                         \n                                    devicePkgArray.forEach((deviceapp_val, index) => {\n                                        if(((type == winPkgExe&& deviceapp_val.projectname.indexOf(val.projectname) != -1)||\n                                        (type == winPkgZip&& deviceapp_val.projectname == val.projectname))){\n                                            // pop latest app info\n                                            pkgManagementInfoArray.pop();\n                                            devicePkgArray[index].address = val.address;\n                                            devicePkgArray[index].tool=val.tool;\n                                            // console.log(this.removeObjInArray(pkgManagementInfoArray, deviceapp_val.projectname, deviceapp_val.version));\n                                            if(this.removeObjInArray(pkgManagementInfoArray, deviceapp_val.projectname, deviceapp_val.version)){\n                                                pkgManagementInfoArray.push(deviceapp_val)\n                                            };\n\n                                            if (_g.cpr_version(val.version, deviceapp_val.version)){  \n                                                UpgradePkgManagementInfo = {\n                                                    type : \"upgrade\", \n                                                    filename: val.filename, \n                                                    projectname: val.projectname,\n                                                    tool: val.tool,\n                                                    productname: deviceapp_val.projectname, \n                                                    version: val.version, \n                                                    address: val.address,\n                                                    reid: val.reid\n                                                };\n                                                    //push update app \n                                                pkgManagementInfoArray.push(UpgradePkgManagementInfo);     \n                                                \n                                            }\n                                            \n                                        }\n                                    })\n                                })\n                            }\n                        }\n                        if(type == winPkgExe){\n                            this.exeTableData = pkgManagementInfoArray.reverse();\n                        }\n                        if(type == winPkgZip){\n                            this.pkgTableData = pkgManagementInfoArray.reverse();\n                        }\n                        \n                    })\n                    \n                })\n            },\n\n            filterType(value, row){\n                return row.type === value ;\n            },\n            actionAppSensor(cid, appdata){\n                if(winPkgControl[cid] === undefined){\n                    this.$swal(\"\", this.$t('global.functionNotSupport'), 'info', {button: this.$t('global.confirm')});\n                    return;\n                }\n                if(!this.selectedAgentId){\n                    this.$swal(\"\",this.$t('global.selectDevice'),\"info\", {button: this.$t('global.confirm')})\n                    return;\n                }\n\n                _g.swalWarnDo(this.$t('global.areYouSure'), this.$t(\"winPkgControl.\"+cid), this.$t('global.confirm'), this.$t('global.cancel')).then((willfunc) => {\n                    if (willfunc) {\n                        _g.openGlobalLoading();\n                        execDeviceStatus(this.selectedAgentId, winPkgControl[cid], appdata).then((data) => {\n                            handleResponse(data, (res) => {\n                                if(res.status == \"CHANGED\"){\n                                    this.activeName = \"pkgStatusHistory\";\n                                    this.$refs.pkgHistory.intervalGetPkgStatusHistory();\n                                }else{\n                                    _g.handleError(res)\n                                }\n                            })\n                        })\n                    }\n                })\n            },\n\n            setAppSensor(cid, setSensorVal){\n                if(winPkgControl[cid] === undefined){\n                    this.$swal(\"\", this.$t('global.functionNotSupport'), 'info', {button: this.$t('global.confirm')});\n                    return;\n                }\n                if(!setSensorVal){\n                    console.error(\"setSensorVal is null\")\n                    return;\n                }\n                if(this.selectedAgentId == ''){\n                    this.$swal(\"\",this.$t('global.selectDevice'),\"info\", {button: this.$t('global.confirm')})\n                    return;\n                }\n                _g.swalWarnDo(this.$t('global.areYouSure'), this.$t(\"winPkgControl.\"+cid), this.$t('global.confirm'), this.$t('global.cancel')).then((willfunc) => {\n                    if (willfunc) {\n                        _g.openGlobalLoading();\n                        setDeviceStatus(this.selectedAgentId, winPkgControl[cid], setSensorVal).then((data) => {\n                            handleResponse(data, (res) => {\n                                if(res.status == \"CHANGED\"){\n                                    this.$swal(\"\",this.$t('global.success'),\"success\", {button: this.$t('global.confirm')}).then(() => {\n                                        this.getSensorStatus();                        \n                                    })\n                                }else{\n                                    _g.handleError(res);\n                                }\n                            })\n                            \n                        })\n                    }\n                })\n            },\n\n            isFinished(){\n                if(this.selectedAgentId){\n                    if(!this.isOffline){\n                        this.getSensorStatus();\n                    }\n                }\n            },\n\n            appAction(cid, selectedAppData){\n                let setsensorval, version, projectname;\n                if(cid === \"upgradeExe\"){\n                    setsensorval = selectedAppData.address + \"/\" +  selectedAppData.filename;\n                    projectname = selectedAppData.productname;\n                }else{\n                    setsensorval = selectedAppData.address + \"/\" +  selectedAppData.filename;\n                    projectname = selectedAppData.projectname;\n                }\n                let taskname = this.singleWinPkgType+ (new Date()).getTime();\n                let pkgdata = {\n                    taskname,\n                    projectname: projectname,\n                    tool: selectedAppData.tool,\n                    version: selectedAppData.version,\n                    downloadpath: setsensorval,\n                }\n                this.actionAppSensor(cid, pkgdata)\n            },\n\n            getSrc(reid){\n                if(reid){\n                    let repourl =  getRepoSrcApi();\n                    return repourl+\"/getExeIcon/\"+reid;\n                }else{\n                    return 'static/imgs/default_windows.png';\n                }\n            },\n\n            initData(){\n                this.startApp = '';\n                this.stopApp = '';\n                this.enableApp = '';\n                this.disableApp = '';\n                this.pkgTableData = [];\n            },\n            handleClick(tab){\n                if(tab.name === \"pkgStatusHistory\"){\n                    this.$emit(\"isDisabled\", false)\n                }else{\n                    this.$emit(\"isDisabled\", true)\n                }\n            },\n        },\n        watch: {\n            isSingleMode(val){\n                if(val){\n                    this.initData();\n                }\n            },\n            selectedAgentId(val){\n                if(this.isSingleMode) {\n                    this.initData();\n\n                    if(val&& !this.isOffline){\n                        this.getSensorStatus();\n\n                        // this.$refs.pkgHistory.intervalGetPkgStatusHistory();\n                    }\n                }\n            },\n            activeName(){\n                this.keywords = \"\";\n            }\n           \n        },\n        computed: {\n            isShowSearchInput(){\n                if(this.activeName === \"winMarket\"|| this.activeName === \"zipMarket\"){\n                    return true;\n                }else{\n                    return false;\n                }\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .noData{\n        margin-top: 30px;\n        p{\n            img{\n                width: 27px;\n                vertical-align: middle;\n            }\n            margin-bottom: 20px;\n            color: #bfbfbf;\n            font-size: 21px;\n        }\n    }\n\n    .search{\n        position: absolute;\n        top: 3px;\n        right: 15px;\n        width: 230px;\n        z-index: 1001;\n        .search-icon{\n            position: absolute;\n            top: 6px;\n            right: 1px;\n            color: #ddd;\n            z-index: 10001;\n        }\n    }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/deploy/windowscontroldetails/single.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isSingleMode),expression:\"isSingleMode\"}],staticClass:\"p-r\"},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isShowSearchInput),expression:\"isShowSearchInput\"}],staticClass:\"search\"},[_c('el-input',{staticClass:\"w-250 m-l-10\",attrs:{\"size\":\"small\",\"placeholder\":_vm.$t('winPkgControl.keywordHolder')},model:{value:(_vm.keywords),callback:function ($$v) {_vm.keywords=$$v},expression:\"keywords\"}}),_vm._v(\" \"),_c('i',{staticClass:\"fa fa-search search-icon\",attrs:{\"aria-hidden\":\"true\"}})],1),_vm._v(\" \"),_c('el-tabs',{on:{\"tab-click\":_vm.handleClick},model:{value:(_vm.activeName),callback:function ($$v) {_vm.activeName=$$v},expression:\"activeName\"}},[_c('el-tab-pane',{attrs:{\"name\":\"winMarket\"}},[_c('span',{attrs:{\"slot\":\"label\"},slot:\"label\"},[_c('i',{staticClass:\"fa fa-sellsy m-r-5\",attrs:{\"aria-hidden\":\"listLoading\"}}),_vm._v(\"\\n                \"+_vm._s(_vm.$t('winPkgControl.exePkgMarket'))+\"\\n            \")]),_vm._v(\" \"),_c('el-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.listLoading),expression:\"listLoading\"}],staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.exeTableData.filter(function (data) { return !_vm.keywords || data.projectname.toLowerCase().includes(_vm.keywords.toLowerCase()); }),\"tooltip-effect\":\"dark\",\"header-cell-style\":{background:'#fafafa',color:'#606266'}}},[_c('el-table-column',{attrs:{\"label\":\"\",\"width\":\"100\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[_c('img',{staticStyle:{\"width\":\"52px\"},attrs:{\"src\":_vm.getSrc(scope.row.reid),\"onerror\":_vm.defaultImg,\"alt\":\"no img\"}})])]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"projectname\",\"label\":_vm.$t('winPkgControl.projectName'),\"min-width\":\"120\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"version\",\"label\":_vm.$t('winPkgControl.version'),\"min-width\":\"120\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"type\",\"label\":_vm.$t('winPkgControl.action'),\"min-width\":\"120\",\"filters\":[{ text: _vm.$t('winPkgControl.uninstall'), value: 'uninstall' }, { text: _vm.$t('winPkgControl.install'), value: 'install' }, { text: _vm.$t('winPkgControl.upgrade'), value: 'upgrade' }],\"filter-method\":_vm.filterType,\"filter-placement\":\"bottom-end\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[_c('span',[_c('el-button-group',[(scope.row.type === 'uninstall')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"danger\",\"disabled\":scope.row.type === 'uninstall'&&!scope.row.tool},on:{\"click\":function($event){_vm.appAction('uninstallExe', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('winPkgControl.uninstall'))+\"\\n                                    \")]):_vm._e(),_vm._v(\" \"),(scope.row.type === 'upgrade')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"warning\"},on:{\"click\":function($event){_vm.appAction('upgradeExe', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('winPkgControl.upgrade'))+\"\\n                                    \")]):_vm._e(),_vm._v(\" \"),(scope.row.type === 'install')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"primary\"},on:{\"click\":function($event){_vm.appAction('installExe', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('winPkgControl.install'))+\"\\n                                    \")]):_vm._e()],1)],1)])]}}])})],1)],1),_vm._v(\" \"),_c('el-tab-pane',{attrs:{\"name\":\"zipMarket\"}},[_c('span',{attrs:{\"slot\":\"label\"},slot:\"label\"},[_c('i',{staticClass:\"fa fa-sellsy m-r-5\",attrs:{\"aria-hidden\":\"listLoading\"}}),_vm._v(\"\\n                \"+_vm._s(_vm.$t('winPkgControl.compressedPkgMarket'))+\"\\n            \")]),_vm._v(\" \"),_c('el-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.listLoading),expression:\"listLoading\"}],staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.pkgTableData.filter(function (data) { return (!_vm.keywords || data.projectname.toLowerCase().includes(_vm.keywords.toLowerCase())); }),\"tooltip-effect\":\"dark\",\"header-cell-style\":{background:'#fafafa',color:'#606266'}}},[_c('el-table-column',{attrs:{\"label\":\"\",\"width\":\"100\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[_c('img',{staticStyle:{\"width\":\"48px\"},attrs:{\"src\":require(\"@/assets/imgs/package.png\"),\"alt\":\"no img\"}})])]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"filename\",\"label\":_vm.$t('linuxPkgControl.fileName'),\"min-width\":\"120\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"projectname\",\"label\":_vm.$t('winPkgControl.projectName'),\"min-width\":\"120\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"version\",\"label\":_vm.$t('winPkgControl.version'),\"min-width\":\"120\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"type\",\"label\":_vm.$t('winPkgControl.action'),\"min-width\":\"120\",\"filters\":[{ text: _vm.$t('winPkgControl.uninstall'), value: 'uninstall' }, { text: _vm.$t('winPkgControl.install'), value: 'install' }, { text: _vm.$t('winPkgControl.upgrade'), value: 'upgrade' }],\"filter-method\":_vm.filterType,\"filter-placement\":\"bottom-end\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[_c('span',[_c('el-button-group',[(scope.row.type === 'uninstall')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"danger\"},on:{\"click\":function($event){_vm.appAction('uninstallPkg', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('winPkgControl.uninstall'))+\"\\n                                    \")]):_vm._e(),_vm._v(\" \"),(scope.row.type === 'upgrade')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"warning\"},on:{\"click\":function($event){_vm.appAction('upgradePkg', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('winPkgControl.upgrade'))+\"\\n                                    \")]):_vm._e(),_vm._v(\" \"),(scope.row.type === 'install')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"primary\"},on:{\"click\":function($event){_vm.appAction('installPkg', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('winPkgControl.install'))+\"\\n                                    \")]):_vm._e()],1)],1)])]}}])})],1)],1),_vm._v(\" \"),_c('el-tab-pane',{attrs:{\"name\":\"pkgStatusHistory\"}},[_c('span',{attrs:{\"slot\":\"label\"},slot:\"label\"},[_c('i',{staticClass:\"fa fa-history m-r-5\",attrs:{\"aria-hidden\":\"true\"}}),_vm._v(\"\\n                \"+_vm._s(_vm.$t('winPkgControl.winManagerHistory'))+\"\\n            \")]),_vm._v(\" \"),_c('pkg-history',{ref:\"pkgHistory\",attrs:{\"statusType\":_vm.singleWinPkgType,\"selectedAgentId\":_vm.selectedAgentId},on:{\"isFinished\":_vm.isFinished}})],1)],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?{\"id\":\"data-v-6c7f1d30\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&index=0!./src/components/deploy/windowscontroldetails/single.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-6c7f1d30\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=styles&index=0!./single.vue\")\n}\nvar normalizeComponent = require(\"!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./single.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./single.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6c7f1d30\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=template&index=0!./single.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-6c7f1d30\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/deploy/windowscontroldetails/single.vue\n// module id = null\n// module chunks = ","<template>\n    <div v-show=\"!isSingleMode\" class=\"pkgStatusContent p-r\">\n        <div class=\"search\" v-show=\"isShowSearchInput\"> \n            <el-input size=\"small\" class=\"w-250 m-l-10\" v-model=\"keywords\" :placeholder=\"$t('winPkgControl.keywordHolder')\" >\n            </el-input>\n            <i class=\"fa fa-search search-icon\" aria-hidden=\"true\"></i>\n        </div>\n\n        <el-tabs v-model=\"activeName\" @tab-click=\"handleClick\">\n            <el-tab-pane name=\"winMarket\">\n                <span slot=\"label\">\n                    <i class=\"fa fa-sellsy m-r-5\" aria-hidden=\"true\"></i>\n                    {{$t('winPkgControl.exePkgMarket')}}\n                </span>\n                <el-table\n                    :data=\"exeTableData.filter(data => !keywords || data.projectname.toLowerCase().includes(keywords.toLowerCase()))\"\n                    tooltip-effect=\"dark\"\n                    style=\"width: 100%\"\n                    v-loading=\"listLoading\"\n                    :header-cell-style=\"{background:'#fafafa',color:'#606266'}\"\n                    >\n\n                    <el-table-column\n                    label=\"\"\n                    width=\"100\"\n                    >\n                        <template slot-scope=\"scope\">\n                            <div>\n                                <img :src=\"getSrc(scope.row.reid)\" :onerror=\"defaultImg\" alt=\"no img\" style=\"width:52px\"/>\n                            </div>\n                        </template>\n                    </el-table-column>\n                    <el-table-column\n                    prop=\"projectname\"\n                    :label=\"$t('winPkgControl.projectName')\"\n                    min-width=\"120\"\n                    sortable\n                    >\n                    </el-table-column>\n\n                    <el-table-column\n                    prop=\"version\"\n                    :label=\"$t('winPkgControl.version')\"\n                    min-width=\"120\"\n                    sortable>\n                    </el-table-column>\n                    <el-table-column\n                    prop=\"type\"\n                    :label=\"$t('winPkgControl.action')\"\n                    min-width=\"120\"\n                    :filters=\"[{ text: $t('winPkgControl.uninstall'), value: 'uninstall' }, { text: $t('winPkgControl.install'), value: 'install' }, { text: $t('winPkgControl.upgrade'), value: 'upgrade' }]\"\n                    :filter-method=\"filterType\"\n                    filter-placement=\"bottom-end\"\n                    >\n                        <template slot-scope=\"scope\">\n                            <div>\n                                <span>\n                                    <el-button-group>\n                                        <el-button \n                                        size=\"small\" \n                                        type=\"danger\" \n                                        @click=\"selectBatchinstallPkg('uninstallExe', scope.row)\"\n                                        v-if=\"scope.row.type === 'uninstall'\"\n                                        :disabled=\"scope.row.type === 'uninstall'&&!scope.row.tool\"\n                                        >\n                                            {{$t('winPkgControl.uninstall')}}\n                                        </el-button>\n                                        \n                                        <el-button \n                                        size=\"small\" \n                                        type=\"warning\" \n                                        @click=\"selectBatchinstallPkg('upgradeExe', scope.row)\" \n                                        v-if=\"scope.row.type === 'upgrade'\"\n                                        >\n                                            {{$t('winPkgControl.upgrade')}}\n                                        </el-button>\n                                        <el-button \n                                        size=\"small\" \n                                        type=\"primary\" \n                                        @click=\"selectBatchinstallPkg('installExe', scope.row)\" \n                                        v-if=\"scope.row.type === 'install'\"\n                                        >\n                                            {{$t('winPkgControl.install')}}\n                                        </el-button>\n                                    </el-button-group>\n                                </span>\n                            </div>\n                        </template>\n                    </el-table-column>\n                </el-table>\n            </el-tab-pane>\n            <el-tab-pane name=\"zipMarket\">\n                <span slot=\"label\">\n                    <i class=\"fa fa-sellsy m-r-5\" aria-hidden=\"listLoading\"></i>\n                    {{$t('winPkgControl.compressedPkgMarket')}}\n                </span>\n                <el-table\n                    :data=\"pkgTableData.filter(data => (!keywords || data.projectname.toLowerCase().includes(keywords.toLowerCase())))\"\n                    tooltip-effect=\"dark\"\n                    style=\"width: 100%\"\n                    v-loading=\"listLoading\"\n                    :header-cell-style=\"{background:'#fafafa',color:'#606266'}\"\n                    >\n\n                    <el-table-column\n                    label=\"\"\n                    width=\"100\"\n                    >\n                        <template slot-scope=\"scope\">\n                            <div>\n                                <img src=\"@/assets/imgs/package.png\"  alt=\"no img\" style=\"width:48px\" />\n                            </div>\n                        </template>\n                    </el-table-column>\n                    <el-table-column\n                    prop=\"filename\"\n                    :label=\"$t('linuxPkgControl.fileName')\"\n                    min-width=\"120\"\n                    >\n                    </el-table-column>\n                    <el-table-column\n                    prop=\"projectname\"\n                    :label=\"$t('winPkgControl.projectName')\"\n                    min-width=\"120\"\n                    sortable\n                    >\n                    </el-table-column>\n                    <el-table-column\n                    prop=\"version\"\n                    :label=\"$t('winPkgControl.version')\"\n                    min-width=\"120\"\n                    sortable>\n                    </el-table-column>\n\n                    <el-table-column\n                    prop=\"type\"\n                    :label=\"$t('winPkgControl.action')\"\n                    min-width=\"120\"\n                    :filters=\"[{ text: $t('winPkgControl.uninstall'), value: 'uninstall' }, { text: $t('winPkgControl.install'), value: 'install' }, { text: $t('winPkgControl.upgrade'), value: 'upgrade' }]\"\n                    :filter-method=\"filterType\"\n                    filter-placement=\"bottom-end\"\n                    >\n                        <template slot-scope=\"scope\">\n                            <div>\n                                <span>\n                                    <el-button-group>\n                                        <el-button \n                                        size=\"small\" \n                                        type=\"danger\" \n                                        @click=\"selectBatchinstallPkg('uninstallPkg', scope.row)\"\n                                        v-if=\"scope.row.type === 'uninstall'\"\n                                        >\n                                            {{$t('winPkgControl.uninstall')}}\n                                        </el-button>\n                                        <el-button \n                                        size=\"small\" \n                                        type=\"warning\" \n                                        @click=\"selectBatchinstallPkg('upgradePkg', scope.row)\" \n                                        v-if=\"scope.row.type === 'upgrade'\"\n                                        >\n                                            {{$t('winPkgControl.upgrade')}}\n                                        </el-button>\n                                        <el-button \n                                        size=\"small\" \n                                        type=\"primary\" \n                                        @click=\"selectBatchinstallPkg('installPkg', scope.row)\" \n                                        v-if=\"scope.row.type === 'install'\"\n                                        >\n                                            {{$t('winPkgControl.install')}}\n                                        </el-button>\n                                    </el-button-group>\n                                </span>\n                            </div>\n                        </template>\n                    </el-table-column>\n                </el-table>\n            </el-tab-pane>\n            <el-tab-pane name=\"winStatusHistory\">\n                <span slot=\"label\">\n                    <i class=\"fa fa-history m-r-5\" aria-hidden=\"true\"></i>\n                    {{$t('winPkgControl.winManagerHistory')}}\n                </span>\n                <pkg-history\n                :statusType=\"batchWinPkgType\"\n                ref=\"pkgHistory\"\n                @getStatusCount=\"getBatchAppStatusCount\"\n                :groupname=\"groupname\"\n                @isFinished=\"isFinished\"\n                >\n                </pkg-history>\n\n            </el-tab-pane>\n        </el-tabs>\n        <el-dialog :visible.sync=\"dialogTasknameVisible\" @close=\"initPkgInfo()\" :close-on-click-modal=\"false\">\n            <div slot=\"title\" class=\"dialog-title\">\n                <i class=\"fa fa-level-up m-r-10\" ></i>\n                {{$t('winPkgControl.batchInstallPkg')}}\n            </div>\n            <el-form :model=\"pkgStatusForm\" :rules=\"rules\" ref=\"pkgStatusForm\">\n                <el-form-item :label=\"$t('label.taskName')\" label-width=\"230px\" prop=\"taskname\">\n                    <el-input v-model.trim=\"pkgStatusForm.taskname\" autocomplete=\"off\" class=\"max-w-350\" :placeholder=\"$t('winPkgControl.installPkgTaskName')\"></el-input>\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"dialogTasknameVisible = false\">{{$t('global.cancel')}}</el-button>\n                <el-button type=\"primary\" @click=\"batchinstallPkg()\">{{$t('global.confirm')}}</el-button>\n            </div>\n        </el-dialog>\n        <div class=\"appStatusCount\" v-show=\"isShowOverview\">\n            <span>{{$t('label.taskName')}} {{win_taskname}}</span>\n            <span>{{$t('winPkgControl.total')}} {{total}}</span>\n            <span>{{$t('winPkgControl.deploying')}} {{installing}}</span>\n            <span>{{$t('winPkgControl.success')}} {{success}}</span>\n            <span>{{$t('winPkgControl.failed')}} {{failed}}</span>\n        </div>\n    </div>\n</template>\n\n<style lang=\"scss\" scoped>\n@import \"@/assets/css/colors.scss\";\n    .pkgStatusContent{\n        position: relative;\n        .appStatusCount{\n            position: absolute;\n            top: 10px;\n            right: 6px;\n            span{\n                font-weight: 500;\n                font-size: 11px;\n                &:nth-child(1){\n                    color: $primary-color;\n                }\n                &:nth-child(2){\n                    border-left: 2px solid #ddd;\n                    padding-left: 3px; \n                    color: $info-color;\n                }\n                &:nth-child(3){\n                    color: $warn-color;\n                }\n                &:nth-child(4){\n                    color: $success-color;\n                }\n                &:nth-child(5){\n                    color: $darkgray-color;\n                }\n            }\n            \n        }\n    }\n\n    .search{\n        position: absolute;\n        top: 3px;\n        right: 15px;\n        width: 230px;\n        z-index: 1001;\n        .search-icon{\n            position: absolute;\n            top: 6px;\n            right: 1px;\n            color: #ddd;\n            z-index: 10001;\n        }\n    }\n    .noData{\n        margin-top: 30px;\n        p{\n            img{\n                width: 27px;\n                vertical-align: middle;\n            }\n            margin-bottom: 20px;\n            color: #bfbfbf;\n            font-size: 21px;\n        }\n    }\n\n</style>\n\n<script>\n    import {winPkgControl, androidControl} from '@/assets/js/lwm2mMap'\n    import handleResponse from '@/components/restfulapi/handleResponse'\n    import {showSystemAppArray, disableAppArray} from \"@/assets/js/constant\"\n    import {getRepoWinPkgsApi, getRepoWinPkgsByTypeApi} from '../../../components/restfulapi/getRepoWinPackageApi';\n    import {getRepoPkgsApi, getRepoApi} from '@/components/restfulapi/getRepoAppApi'\n    import{getAppStatusOverviewApi} from \"@/components/restfulapi/appStatusApi\"\n\n    import {getDeviceStatus, setDeviceStatus, batchExecDeviceStatus} from '@/components/restfulapi/deviceStatusApi';\n    import {setLocal, getLocal, getSession, checkSession, setSession} from \"../../../assets/js/storage\"\n    import {getRepoSrcApi} from \"../../restfulapi/serverConfigApi\"\n\n    import {singleWinPkgType, batchWinPkgType, winPkgExe, winPkgZip} from \"../../../assets/js/constant\";\n    import pkgHistory from \"./history\"\n    export default{\n        name: 'batchwinPkgControl',\n        data(){\n            let validateTaskname = (rule,value,callback)=>{\n                let reg=new RegExp(/^(?![._-\\s])[\\u4E00-\\u9FA5A-Za-z0-9_\\-\\.\\s]{1,12}$/);\n                if(!reg.test(value)){\n                    return callback(new Error (this.$t('global.verifyShortError')))\n                }else{callback()};\n            };\n            return {\n                activeName: \"winMarket\",\n                pkgTableData: [],\n                exeTableData: [],\n                defaultImg: 'this.src=\"' + 'static/imgs/default_windows.png' + '\"',\n                dialogTasknameVisible: false,\n                //win package status history\n                projectname: '',\n                version: '',\n                address: '',\n                tool: \"\",\n                filename: '',\n                //batch installPkg\n                pkgStatusForm:{\n                    taskname: '',\n                },\n                rules:{\n                    taskname: {required: true, validator: validateTaskname, trigger: 'blur'}\n                },\n\n                batchWinPkgType: batchWinPkgType,\n                cid: \"\",\n                disableAppArray: disableAppArray,\n                //installstatus count show\n                isShowOverview: false,\n                win_taskname: '',\n                success: 0,\n                installing: 0,\n                failed: 0,\n                listLoading: false,\n                keywords: '',\n                zipKeywords: \"\"\n            }\n        },\n\n        props:{\n            selectedAgentsData: {\n                type: Array,\n                default: []\n            },\n            groupname: {\n                type: String,\n                default: \"\"\n            }, \n            isSingleMode: {\n                type: Boolean,\n                default: true\n            }\n        },\n\n        components: {\n            pkgHistory,\n        },\n\n        methods:{\n            filterType(value, row){\n                return row.type === value ;\n            },\n\n            getSensorStatus(){\n                if(this.isSingleMode) {\n                    console.error(\"Cannot operate in a single mode\");\n                    return;\n                }\n                if(this.selectedAgentsData.length == 0){\n                    console.error(\"getSensorStatus: agentData is null\");\n                    return;\n                }\n\n                this.listLoading = true;\n                getDeviceStatus(this.selectedAgentsData[0].value, winPkgControl[\"getExeInfo\"]).then((obj) => {\n                    let pkgManagementInfoArray = [];\n                    let devicePkgArray = [];\n                    this.listLoading = false;\n                    handleResponse(obj, (res) => {\n                        if(res.status == \"CONTENT\"){\n                            if(res.content.value){\n                                let allPkgData = JSON.parse(res.content.value);\n                                // let allPkgData = apppackageinfo.data;\n                                if(Object.prototype.toString.call(allPkgData) === \"[object Array]\" && allPkgData.length > 0){\n                                    allPkgData.forEach((val) => {\n                                        let uninstallPkgObj = {\n                                            type: 'uninstall',\n                                            filename: \"\",\n                                            projectname: val.projectname,\n                                            tool: \"\",\n                                            version: val.version,\n                                            address: \"\",\n                                            reid: \"\",\n                                        };\n                                        pkgManagementInfoArray.push(uninstallPkgObj);\n                                        devicePkgArray.push(uninstallPkgObj);                            \n                                            \n                                    })\n                                }\n                            }\n                            \n                            this.getRepoPkgs(pkgManagementInfoArray, devicePkgArray, winPkgExe);  \n                        }\n                    })   \n                })\n\n                getDeviceStatus(this.selectedAgentsData[0].value, winPkgControl[\"getPkgInfo\"]).then((obj) => {\n                    let pkgManagementInfoArray = [];\n                    let devicePkgArray = [];\n                    this.listLoading = false;\n                    handleResponse(obj, (res) => {\n                        if(res.status == \"CONTENT\"){\n                            let allPkgData = JSON.parse(res.content.value);\n                            if(Object.prototype.toString.call(allPkgData) === \"[object Array]\" && allPkgData.length > 0){\n                                allPkgData.forEach((val) => {\n                                    let uninstallObj = {\n                                        type: 'uninstall',\n                                        filename: val.pkgname,\n                                        projectname: val.appname,\n                                        tool: \"\",\n                                        version: val.version,\n                                        address: \"\",\n                                        reid: \"\",\n                                    };\n                                    pkgManagementInfoArray.push(uninstallObj);\n                                    devicePkgArray.push(uninstallObj);  \n                                })\n                            }\n                            this.getRepoPkgs(pkgManagementInfoArray, devicePkgArray, winPkgZip);  \n                        }\n                    })   \n                })\n            },\n            \n            // Deletes an object of a particular value in array\n            removeObjInArray(originData, rem_pkg_val, version){\n                let res = false;\n                if(Object.prototype.toString.call(originData) === \"[object Array]\"){\n                    \n                    originData.forEach((obj_val, index) => {\n                        if(obj_val.projectname === rem_pkg_val&& obj_val.version === version){\n                            originData.splice(index ,1)\n                            res = true;\n                        }\n                    })\n                }else{\n                     console.error(\"data is not array\")\n                     \n                }\n                return res;\n            },\n            //get repo apps\n            getRepoPkgs(pkgManagementInfoArray, devicePkgArray, type){\n                if(\n                    Object.prototype.toString.call(pkgManagementInfoArray) != \"[object Array]\" ||\n                    Object.prototype.toString.call(devicePkgArray) != \"[object Array]\"\n                ){\n                    console.error(\"getRepoPkgs　parameter is not array\")\n                    return;\n                }\n                let token;\n                let installPkgManagementInfo = {};\n                let upgradePkgManagementInfo = {};\n                this.listLoading = true;\n                getRepoWinPkgsByTypeApi(type).then((data) => {\n                    this.listLoading = false;\n                    handleResponse(data, (res) => {\n                       if(res.status === \"success\"){\n                            let installPkgopt = \"\";\n                            let upgradePkgopt = \"\";\n                            let lastVersionCode = [];\n                            if(Object.prototype.toString.call(res.data) === \"[object Array]\"){\n                                res.data.forEach((val) => {\n                                    \n                                    installPkgManagementInfo = {\n                                        type : \"install\", \n                                        filename: val.filename, \n                                        projectname: val.projectname, \n                                        tool: val.tool,\n                                        version: val.version, \n                                        address: val.address,\n                                        reid: val.reid\n                                        };\n                                    pkgManagementInfoArray.push(installPkgManagementInfo);\n                                    console.log(devicePkgArray)\n                                    devicePkgArray.forEach((deviceapp_val, index) => {\n                                        if((type == winPkgExe&& deviceapp_val.projectname.indexOf(val.projectname) != -1)||\n                                        (type == winPkgZip&& deviceapp_val.projectname == val.projectname)){\n                                            // pop latest app info\n                                            pkgManagementInfoArray.pop();\n                                            console.log(pkgManagementInfoArray)\n                                            devicePkgArray[index].address = val.address;\n                                            devicePkgArray[index].tool = val.tool;\n                                            if(this.removeObjInArray(pkgManagementInfoArray, deviceapp_val.projectname, deviceapp_val.version)){\n                                                pkgManagementInfoArray.push(deviceapp_val)\n                                            }\n\n                                            if (_g.cpr_version(val.version, deviceapp_val.version)){\n                                                upgradePkgManagementInfo = {\n                                                    type : \"upgrade\", \n                                                    filename: val.filename, \n                                                    projectname: val.projectname, \n                                                    productname: deviceapp_val.projectname,\n                                                    version: val.version, \n                                                    tool: val.tool,\n                                                    address: val.address,\n                                                    reid: val.reid\n                                                    };\n                                                    //push update app \n                                                pkgManagementInfoArray.push(upgradePkgManagementInfo);     \n                                                \n                                            }\n                                            \n                                        }\n                                    })\n                                })\n                            }\n                        }\n                        if(type == winPkgExe){\n                            this.exeTableData = pkgManagementInfoArray.reverse();\n                        }\n                        if(type == winPkgZip){\n                            this.pkgTableData = pkgManagementInfoArray.reverse();\n                        }\n                    })\n                    \n                })\n            },\n\t\n            //batch install app\n            batchSetAppSensor(cid, setSensorVal){\n                if(winPkgControl[cid] === undefined){\n                    this.$swal(\"\", this.$t('global.functionNotSupport'), 'info', {button: this.$t('global.confirm')});\n                    return;\n                }\n                _g.openGlobalLoading();\n               \n                let pkgdata = {\n                    groupname: this.groupname,\n                    taskname: this.pkgStatusForm.taskname,\n                    projectname: this.projectname,\n                    tool: this.tool,\n                    version: this.version,\n                    downloadpath: setSensorVal,\n\n                }  \n                let taskname = this.pkgStatusForm.taskname;\n                this.dialogTasknameVisible = false;                  \n                batchExecDeviceStatus(winPkgControl[cid], pkgdata).then((data) => {\n                    handleResponse(data, (res) => {\n                        if(res.status == \"CHANGED\"){\n                            //show overview\n                            setLocal(\"win_taskname\", taskname);\n                            this.activeName = \"winStatusHistory\";\n                            this.$refs.pkgHistory.intervalGetPkgStatusHistory();\n                        }else{\n                            _g.handleError(res);\n                        }\n                    })  \n                })                    \n            },\n\n            batchinstallPkg(){\n                if(this.selectedAgentsData.length === 0){\n                    this.$swal(\"\", this.$t('global.devicesOffline'),\"info\", {button: this.$t('global.confirm')});\n                    return;\n                }\n                this.$refs.pkgStatusForm.validate((valid) => {\n                    if(valid) {\n                        let apkDownloadAddress = this.address + \"/\" + this.filename;\n                        this.batchSetAppSensor(this.cid, apkDownloadAddress);\n                        \n                    }\n                })\n            },\n            \n            selectBatchinstallPkg(type, selectedAppData){\n                this.cid = type;\n                this.address = selectedAppData.address;\n                if(type == \"upgradeExe\"){\n                    this.projectname = selectedAppData.productname;\n                }else{\n                    this.projectname = selectedAppData.projectname;\n                }\n                this.tool = selectedAppData.tool;\n                this.filename = selectedAppData.filename;\n                this.version = selectedAppData.version;\n                this.pkgStatusForm.taskname = \"\";\n                this.dialogTasknameVisible = true;\n            },\n\n            initPkgInfo(){\n                this.projectname = \"\";\n                this.version = \"\";\n                this.address = \"\";\n                this.pkgStatusForm.taskname = \"\";\n                this.cid = \"\";\n                this.tool = \"\";\n                this.filename = \"\";\n            },\n\n             //get updatedp status count\n            getBatchAppStatusCount(){\n                let win_taskname = getLocal(\"win_taskname\");\n                if(!win_taskname){\n                    console.error(\"getBatchAppStatusCount:localStorage(win_taskname) is null\")\n                    this.isShowOverview = false;\n                    return;\n                }\n                getAppStatusOverviewApi(win_taskname, batchWinPkgType).then((data) => {\n                    handleResponse((data), (res) => {\n                        if(res){\n                            this.win_taskname = win_taskname;\n\n                            this.installing = res.installing;\n                            this.failed = res.fail;\n                            this.success = res.success;\n                            if(this.total > 0 &&  this.activeName === \"winStatusHistory\"){\n                                this.isShowOverview = true;\n                            }else{\n                                this.isShowOverview = false;\n                            }\n                        }\n                    })\n                })\n            },\n            \n            initData(){\n                this.pkgTableData = [];\n            },\n\n            getSrc(reid){\n                if(reid){\n                    let repourl =  getRepoSrcApi();\n                    return repourl+\"/getExeIcon/\"+reid;\n                }else{\n                    return 'static/imgs/default_windows.png';\n                }\n            },\n\n            handleClick(tab){\n                if(tab.name === \"winStatusHistory\"){\n                    this.getBatchAppStatusCount();\n                }else{\n                    this.isShowOverview = false;\n                }\n            },\n            isFinished(){\n                this.getSensorStatus();  \n            },\n\n        },\n       \n        computed: {\n            \n            isShowSearchInput(){\n                if(this.activeName === \"winMarket\"|| this.activeName === \"zipMarket\"){\n                    return true;\n                }else{\n                    return false;\n                }\n            },\n            total(){\n                return  this.success+ this.installing+ this.failed;\n            }\n\n        },\n       \n        watch: {\n            isSingleMode(val){\n                if(!val){\n                    this.initData();\n                }\n            },\n            groupname(val){\n                if(!this.isSingleMode&& val){\n                    this.initData();\n                    this.getSensorStatus();\n                }\n            },\n            activeName(){\n                this.keywords = \"\";\n            }\n        }\n\n    }\n</script>\n\n\n// WEBPACK FOOTER //\n// src/components/deploy/windowscontroldetails/batch.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.isSingleMode),expression:\"!isSingleMode\"}],staticClass:\"pkgStatusContent p-r\"},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isShowSearchInput),expression:\"isShowSearchInput\"}],staticClass:\"search\"},[_c('el-input',{staticClass:\"w-250 m-l-10\",attrs:{\"size\":\"small\",\"placeholder\":_vm.$t('winPkgControl.keywordHolder')},model:{value:(_vm.keywords),callback:function ($$v) {_vm.keywords=$$v},expression:\"keywords\"}}),_vm._v(\" \"),_c('i',{staticClass:\"fa fa-search search-icon\",attrs:{\"aria-hidden\":\"true\"}})],1),_vm._v(\" \"),_c('el-tabs',{on:{\"tab-click\":_vm.handleClick},model:{value:(_vm.activeName),callback:function ($$v) {_vm.activeName=$$v},expression:\"activeName\"}},[_c('el-tab-pane',{attrs:{\"name\":\"winMarket\"}},[_c('span',{attrs:{\"slot\":\"label\"},slot:\"label\"},[_c('i',{staticClass:\"fa fa-sellsy m-r-5\",attrs:{\"aria-hidden\":\"true\"}}),_vm._v(\"\\n                \"+_vm._s(_vm.$t('winPkgControl.exePkgMarket'))+\"\\n            \")]),_vm._v(\" \"),_c('el-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.listLoading),expression:\"listLoading\"}],staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.exeTableData.filter(function (data) { return !_vm.keywords || data.projectname.toLowerCase().includes(_vm.keywords.toLowerCase()); }),\"tooltip-effect\":\"dark\",\"header-cell-style\":{background:'#fafafa',color:'#606266'}}},[_c('el-table-column',{attrs:{\"label\":\"\",\"width\":\"100\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[_c('img',{staticStyle:{\"width\":\"52px\"},attrs:{\"src\":_vm.getSrc(scope.row.reid),\"onerror\":_vm.defaultImg,\"alt\":\"no img\"}})])]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"projectname\",\"label\":_vm.$t('winPkgControl.projectName'),\"min-width\":\"120\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"version\",\"label\":_vm.$t('winPkgControl.version'),\"min-width\":\"120\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"type\",\"label\":_vm.$t('winPkgControl.action'),\"min-width\":\"120\",\"filters\":[{ text: _vm.$t('winPkgControl.uninstall'), value: 'uninstall' }, { text: _vm.$t('winPkgControl.install'), value: 'install' }, { text: _vm.$t('winPkgControl.upgrade'), value: 'upgrade' }],\"filter-method\":_vm.filterType,\"filter-placement\":\"bottom-end\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[_c('span',[_c('el-button-group',[(scope.row.type === 'uninstall')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"danger\",\"disabled\":scope.row.type === 'uninstall'&&!scope.row.tool},on:{\"click\":function($event){_vm.selectBatchinstallPkg('uninstallExe', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('winPkgControl.uninstall'))+\"\\n                                    \")]):_vm._e(),_vm._v(\" \"),(scope.row.type === 'upgrade')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"warning\"},on:{\"click\":function($event){_vm.selectBatchinstallPkg('upgradeExe', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('winPkgControl.upgrade'))+\"\\n                                    \")]):_vm._e(),_vm._v(\" \"),(scope.row.type === 'install')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"primary\"},on:{\"click\":function($event){_vm.selectBatchinstallPkg('installExe', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('winPkgControl.install'))+\"\\n                                    \")]):_vm._e()],1)],1)])]}}])})],1)],1),_vm._v(\" \"),_c('el-tab-pane',{attrs:{\"name\":\"zipMarket\"}},[_c('span',{attrs:{\"slot\":\"label\"},slot:\"label\"},[_c('i',{staticClass:\"fa fa-sellsy m-r-5\",attrs:{\"aria-hidden\":\"listLoading\"}}),_vm._v(\"\\n                \"+_vm._s(_vm.$t('winPkgControl.compressedPkgMarket'))+\"\\n            \")]),_vm._v(\" \"),_c('el-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.listLoading),expression:\"listLoading\"}],staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.pkgTableData.filter(function (data) { return (!_vm.keywords || data.projectname.toLowerCase().includes(_vm.keywords.toLowerCase())); }),\"tooltip-effect\":\"dark\",\"header-cell-style\":{background:'#fafafa',color:'#606266'}}},[_c('el-table-column',{attrs:{\"label\":\"\",\"width\":\"100\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[_c('img',{staticStyle:{\"width\":\"48px\"},attrs:{\"src\":require(\"@/assets/imgs/package.png\"),\"alt\":\"no img\"}})])]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"filename\",\"label\":_vm.$t('linuxPkgControl.fileName'),\"min-width\":\"120\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"projectname\",\"label\":_vm.$t('winPkgControl.projectName'),\"min-width\":\"120\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"version\",\"label\":_vm.$t('winPkgControl.version'),\"min-width\":\"120\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"type\",\"label\":_vm.$t('winPkgControl.action'),\"min-width\":\"120\",\"filters\":[{ text: _vm.$t('winPkgControl.uninstall'), value: 'uninstall' }, { text: _vm.$t('winPkgControl.install'), value: 'install' }, { text: _vm.$t('winPkgControl.upgrade'), value: 'upgrade' }],\"filter-method\":_vm.filterType,\"filter-placement\":\"bottom-end\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[_c('span',[_c('el-button-group',[(scope.row.type === 'uninstall')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"danger\"},on:{\"click\":function($event){_vm.selectBatchinstallPkg('uninstallPkg', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('winPkgControl.uninstall'))+\"\\n                                    \")]):_vm._e(),_vm._v(\" \"),(scope.row.type === 'upgrade')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"warning\"},on:{\"click\":function($event){_vm.selectBatchinstallPkg('upgradePkg', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('winPkgControl.upgrade'))+\"\\n                                    \")]):_vm._e(),_vm._v(\" \"),(scope.row.type === 'install')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"primary\"},on:{\"click\":function($event){_vm.selectBatchinstallPkg('installPkg', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('winPkgControl.install'))+\"\\n                                    \")]):_vm._e()],1)],1)])]}}])})],1)],1),_vm._v(\" \"),_c('el-tab-pane',{attrs:{\"name\":\"winStatusHistory\"}},[_c('span',{attrs:{\"slot\":\"label\"},slot:\"label\"},[_c('i',{staticClass:\"fa fa-history m-r-5\",attrs:{\"aria-hidden\":\"true\"}}),_vm._v(\"\\n                \"+_vm._s(_vm.$t('winPkgControl.winManagerHistory'))+\"\\n            \")]),_vm._v(\" \"),_c('pkg-history',{ref:\"pkgHistory\",attrs:{\"statusType\":_vm.batchWinPkgType,\"groupname\":_vm.groupname},on:{\"getStatusCount\":_vm.getBatchAppStatusCount,\"isFinished\":_vm.isFinished}})],1)],1),_vm._v(\" \"),_c('el-dialog',{attrs:{\"visible\":_vm.dialogTasknameVisible,\"close-on-click-modal\":false},on:{\"update:visible\":function($event){_vm.dialogTasknameVisible=$event},\"close\":function($event){_vm.initPkgInfo()}}},[_c('div',{staticClass:\"dialog-title\",attrs:{\"slot\":\"title\"},slot:\"title\"},[_c('i',{staticClass:\"fa fa-level-up m-r-10\"}),_vm._v(\"\\n            \"+_vm._s(_vm.$t('winPkgControl.batchInstallPkg'))+\"\\n        \")]),_vm._v(\" \"),_c('el-form',{ref:\"pkgStatusForm\",attrs:{\"model\":_vm.pkgStatusForm,\"rules\":_vm.rules}},[_c('el-form-item',{attrs:{\"label\":_vm.$t('label.taskName'),\"label-width\":\"230px\",\"prop\":\"taskname\"}},[_c('el-input',{staticClass:\"max-w-350\",attrs:{\"autocomplete\":\"off\",\"placeholder\":_vm.$t('winPkgControl.installPkgTaskName')},model:{value:(_vm.pkgStatusForm.taskname),callback:function ($$v) {_vm.$set(_vm.pkgStatusForm, \"taskname\", (typeof $$v === 'string'? $$v.trim(): $$v))},expression:\"pkgStatusForm.taskname\"}})],1)],1),_vm._v(\" \"),_c('div',{staticClass:\"dialog-footer\",attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('el-button',{on:{\"click\":function($event){_vm.dialogTasknameVisible = false}}},[_vm._v(_vm._s(_vm.$t('global.cancel')))]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":function($event){_vm.batchinstallPkg()}}},[_vm._v(_vm._s(_vm.$t('global.confirm')))])],1)],1),_vm._v(\" \"),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isShowOverview),expression:\"isShowOverview\"}],staticClass:\"appStatusCount\"},[_c('span',[_vm._v(_vm._s(_vm.$t('label.taskName'))+\" \"+_vm._s(_vm.win_taskname))]),_vm._v(\" \"),_c('span',[_vm._v(_vm._s(_vm.$t('winPkgControl.total'))+\" \"+_vm._s(_vm.total))]),_vm._v(\" \"),_c('span',[_vm._v(_vm._s(_vm.$t('winPkgControl.deploying'))+\" \"+_vm._s(_vm.installing))]),_vm._v(\" \"),_c('span',[_vm._v(_vm._s(_vm.$t('winPkgControl.success'))+\" \"+_vm._s(_vm.success))]),_vm._v(\" \"),_c('span',[_vm._v(_vm._s(_vm.$t('winPkgControl.failed'))+\" \"+_vm._s(_vm.failed))])])],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?{\"id\":\"data-v-60a05842\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&index=0!./src/components/deploy/windowscontroldetails/batch.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-60a05842\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=styles&index=0!./batch.vue\")\n}\nvar normalizeComponent = require(\"!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./batch.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./batch.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-60a05842\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=template&index=0!./batch.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-60a05842\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/deploy/windowscontroldetails/batch.vue\n// module id = null\n// module chunks = ","<template>\n    <div class=\"content-box\">\n        <div class=\"title-box\">\n            <p class=\"header-line\">\n                <i class=\"fa fa-sliders m-r-10\" ></i>\n                {{$t('winPkgControl.pkgDeploy')}}\n                \n            </p>\n        </div>\n\n        <div class=\"select-box\">\n            <mode-switch @mode-status=\"changeMode\" ></mode-switch>\n            <span class=\"vertical\"></span>\n            <select-group \n            @select-getDeviceOptions=\"getGroupOption\" \n            @select-getGroupName=\"getGroupName\" \n            :isSingleMode=\"isSingleMode\"\n            :groupType=\"groupTypeArray\">\n            </select-group>\n            <select-device \n            @select-device=\"getDeviceOption\"\n            @isOfflineDev=\"isOfflineDev\" \n            :isSingleMode=\"isSingleMode\"\n            :isDisabledOffDev=\"isDisabledOffDev\"\n            :groupType=\"groupType\">\n            </select-device>\n            <p class=\"note\">\n                <i>{{$t('winPkgControl.note')}}</i>\n                {{$t('winPkgControl.noteContent')}}\n            </p>\n        </div>\n        <div class=\"table-box\" >\n            <single-control \n            :selectedAgentId=\"selectedAgentId\" \n            :isSingleMode=\"isSingleMode\"\n            @isDisabled=\"isDisabled\"\n            :isOffline=\"isOffline\">\n            </single-control>\n            <batch-control \n            :selectedAgentsData=\"selectedAgentsData\" \n            :isSingleMode=\"isSingleMode\"\n            :groupname=\"groupname\"\n            ></batch-control>\n        </div>\n    </div>\n</template>\n<style lang=\"scss\" scoped>\n@import \"../../assets/css/colors\"; \n    \n    .content-box{\n        .select-box{\n            .note{\n                margin-top: 5px;\n                color: #fff;\n                font-size:14px;\n                i{\n                    color: $danger-color;\n                    margin-right: 8px;\n                    \n                }\n            }\n        }   \n    } \n</style>\n<script>\n    import selectDevice from '../../common/select-device'\n    import modeSwitch from \"../../common/mode-switch\"\n    import selectGroup from \"../../common/select-group\"\n    import singleControl from \"./windowscontroldetails/single\"\n    import batchControl from \"./windowscontroldetails/batch\"\n    import {groupType} from \"../../assets/js/constant\"\n\n    export default{\n        name: 'controlAppcontrol',\n        data(){\n            return {\n                selectedAgentId: '',\n                selectedAgentsData: [],\n                isSingleMode: true,\n                groupname: '',\n                //offline device is disabled\n                isDisabledOffDev: true,\n                //selectedAgent is offline\n                isOffline: false,\n                groupType: groupType.windows,\n                groupTypeArray: [groupType.windows]\n            }\n        },\n        components:{\n            selectDevice,\n            selectGroup,\n            modeSwitch,\n            singleControl,\n            batchControl\n        },\n        methods:{\n\n            getDeviceOption(selectedAgentId){ \n                this.selectedAgentId = selectedAgentId;\n            },\n\n            getGroupOption(selectedAgentsData){\n                this.selectedAgentsData = selectedAgentsData;\n            },\n\n            initData(){\n                this.selectedAgentId = \"\";\n                this.groupname = \"\";\n                this.selectedAgentsData = [];\n            },\n\n            changeMode(val){\n                this.initData();\n                this.isSingleMode = !val\n            },\n\n            getGroupName(groupname){\n                this.groupname = groupname;\n            },\n\n            isDisabled(value){\n                this.isDisabledOffDev = value;\n            },\n            isOfflineDev(value){\n                this.isOffline = value\n            }\n            \n        },\n\n    }\n</script>\n\n\n\n\n\n// WEBPACK FOOTER //\n// src/components/deploy/windowscontrol.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content-box\"},[_c('div',{staticClass:\"title-box\"},[_c('p',{staticClass:\"header-line\"},[_c('i',{staticClass:\"fa fa-sliders m-r-10\"}),_vm._v(\"\\n            \"+_vm._s(_vm.$t('winPkgControl.pkgDeploy'))+\"\\n            \\n        \")])]),_vm._v(\" \"),_c('div',{staticClass:\"select-box\"},[_c('mode-switch',{on:{\"mode-status\":_vm.changeMode}}),_vm._v(\" \"),_c('span',{staticClass:\"vertical\"}),_vm._v(\" \"),_c('select-group',{attrs:{\"isSingleMode\":_vm.isSingleMode,\"groupType\":_vm.groupTypeArray},on:{\"select-getDeviceOptions\":_vm.getGroupOption,\"select-getGroupName\":_vm.getGroupName}}),_vm._v(\" \"),_c('select-device',{attrs:{\"isSingleMode\":_vm.isSingleMode,\"isDisabledOffDev\":_vm.isDisabledOffDev,\"groupType\":_vm.groupType},on:{\"select-device\":_vm.getDeviceOption,\"isOfflineDev\":_vm.isOfflineDev}}),_vm._v(\" \"),_c('p',{staticClass:\"note\"},[_c('i',[_vm._v(_vm._s(_vm.$t('winPkgControl.note')))]),_vm._v(\"\\n            \"+_vm._s(_vm.$t('winPkgControl.noteContent'))+\"\\n        \")])],1),_vm._v(\" \"),_c('div',{staticClass:\"table-box\"},[_c('single-control',{attrs:{\"selectedAgentId\":_vm.selectedAgentId,\"isSingleMode\":_vm.isSingleMode,\"isOffline\":_vm.isOffline},on:{\"isDisabled\":_vm.isDisabled}}),_vm._v(\" \"),_c('batch-control',{attrs:{\"selectedAgentsData\":_vm.selectedAgentsData,\"isSingleMode\":_vm.isSingleMode,\"groupname\":_vm.groupname}})],1)])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?{\"id\":\"data-v-7bc30d1a\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&index=0!./src/components/deploy/windowscontrol.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-7bc30d1a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=styles&index=0!./windowscontrol.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./windowscontrol.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./windowscontrol.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-7bc30d1a\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=template&index=0!./windowscontrol.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-7bc30d1a\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/deploy/windowscontrol.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}