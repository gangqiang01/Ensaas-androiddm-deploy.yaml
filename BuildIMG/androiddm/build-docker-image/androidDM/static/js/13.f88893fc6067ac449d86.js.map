{"version":3,"sources":["webpack:///src/components/deploy/linuxcontroldetails/history.vue","webpack:///./src/components/deploy/linuxcontroldetails/history.vue?a4d0","webpack:///./src/components/deploy/linuxcontroldetails/history.vue","webpack:///src/components/deploy/linuxcontroldetails/single.vue","webpack:///./src/components/deploy/linuxcontroldetails/single.vue?9631","webpack:///./src/components/deploy/linuxcontroldetails/single.vue","webpack:///src/components/deploy/linuxcontroldetails/batch.vue","webpack:///./src/components/deploy/linuxcontroldetails/batch.vue?de4c","webpack:///./src/components/deploy/linuxcontroldetails/batch.vue","webpack:///src/components/deploy/linuxcontrol.vue","webpack:///./src/components/deploy/linuxcontrol.vue?19a7","webpack:///./src/components/deploy/linuxcontrol.vue","webpack:///./src/components/restfulapi/getRepoLinuxPackageApi.js"],"names":["linuxcontroldetails_history","name","data","pkgStatusHistoryTableList","isshow","limit","dataCount","currentPage","multipleSelection","isShowBtnGroup","clearLoading","batchDeleteAppStatusHistory","appStatusApi","intervalTime","isInterval","listLoading","singleDebType","constant","batchDebType","statusArray","components","btnGroup","props","statusType","default","type","String","selectedAgentId","groupname","methods","selectItem","val","this","checkSelectable","row","status","handleCurrentChange","intervalGetPkgStatusHistory","deleteHistory","aisid","_this","_g","swalInfoDo","$t","then","result","Object","handleResponse","res","$swal","button","handleError","checkAppStatusData","getAppStatusHistoryByGroupname","_this2","console","error","length","assignAppStatusData","getAppStatusHistoryBydevid","_this3","prototype","toString","call","count","isFinish","$emit","forEach","window","clearInterval","timer","_this4","setInterval","filterStatus","value","isArray","resetAppSensor","sensorId","appdata","_this5","deviceStatusApi","activeName","reinstall","appItem","_this6","taskname","productname","pkgname","version","versionname","downloadpath","address","target","deviceId","isSuccess","clearAll","_this7","initData","created","beforeDestroy","watch","deploy_linuxcontroldetails_history","render","_vm","_h","$createElement","_c","_self","directives","rawName","expression","ref","staticStyle","width","attrs","tooltip-effect","default-sort","prop","order","header-cell-style","background","color","on","selection-change","filter-change","min-width","selectable","_v","label","_e","scopedSlots","_u","key","fn","scope","_s","_f","ts","column-key","filters","text","filter-placement","height","src","__webpack_require__","alt","staticClass","errorcode","align","size","click","$event","disabled","selectedData","isDelete","isMove","tid","delApi","layout","page-size","current-page","total","current-change","staticRenderFns","components_deploy_linuxcontroldetails_history","normalizeComponent","ssrContext","single","pkgTableData","defaultImg","keywords","isSingleMode","Boolean","isOffline","pkgHistory","getSensorStatus","pkgManagementInfoArray","devicePkgArray","lwm2mMap","obj","content","allPkgData","JSON","parse","pkgtype","uninstallPkgObj","filename","appname","filetype","push","getRepoPkgs","removeObjInArray","originData","rem_pkg_val","obj_val","index","splice","InstallPkgManagementInfo","UpgradePkgManagementInfo","getRepoLinuxPackageApi","versionName","deviceapp_val","pop","cpr_version","reverse","filterType","filterFileType","actionAppSensor","cid","undefined","swalWarnDo","willfunc","openGlobalLoading","$refs","isFinished","appAction","selectedAppData","setsensorval","pkgdata","Date","getTime","startApp","stopApp","enableApp","disableApp","handleClick","tab","computed","isShowSearchInput","linuxcontroldetails_single","placeholder","model","callback","$$v","aria-hidden","tab-click","slot","filter","toLowerCase","includes","sortable","filter-method","deploy_linuxcontroldetails_single","single_normalizeComponent","batch","dialogTasknameVisible","pkgStatusForm","rules","required","validator","rule","RegExp","test","Error","trigger","disableAppArray","isShowOverview","linux_taskname","success","installing","failed","selectedAgentsData","Array","batchSetAppSensor","setSensorVal","storage","batchinstallPkg","validate","valid","apkDownloadAddress","selectBatchinstallPkg","initPkgInfo","getBatchAppStatusCount","fail","fileType","linuxcontroldetails_batch","getStatusCount","visible","close-on-click-modal","update:visible","close","label-width","autocomplete","$set","trim","deploy_linuxcontroldetails_batch","batch_normalizeComponent","linuxcontrol","isDisabledOffDev","groupType","linux","groupTypeArray","selectDevice","select_device","selectGroup","select_group","modeSwitch","mode_switch","singleControl","batchControl","getDeviceOption","getGroupOption","changeMode","getGroupName","isDisabled","isOfflineDev","deploy_linuxcontrol","mode-status","select-getDeviceOptions","select-getGroupName","select-device","linuxcontrol_Component","linuxcontrol_normalizeComponent","__webpack_exports__","getRepoLinuxPkgsApi","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default","a","resolve","reject","getRepoServerApi","repoUrl","getRepoLinuxPkgUrl","repoApiGet","catch","response"],"mappings":"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","file":"static/js/13.f88893fc6067ac449d86.js","sourcesContent":["<template>\n    <div>\n        <el-table\n            :data=\"pkgStatusHistoryTableList\"\n            tooltip-effect=\"dark\"\n            style=\"width: 100%\"\n            @selection-change=\"selectItem\"\n            @filter-change=\"filterStatus\"\n            :default-sort = \"{prop: 'ts', order: 'descending'}\"\n            ref=\"pkgStatusHistoryTable\"\n            v-loading=\"listLoading\" \n            :header-cell-style=\"{background:'#fafafa',color:'#606266'}\"\n            >\n            <el-table-column\n            type=\"selection\"\n            min-width=\"50\"\n            :selectable=\"checkSelectable\">\n            </el-table-column>\n\n            <el-table-column\n            prop=\"devname\"\n            :label=\"$t('linuxPkgControl.deviceName')\"\n            min-width=\"120\"\n            >\n            </el-table-column>\n\n            <el-table-column\n            prop=\"taskname\"\n            :label=\"$t('linuxPkgControl.taskName')\"\n            min-width=\"120\"\n            v-if=\"statusType == batchDebType\"\n            >\n            </el-table-column>\n\n            <el-table-column\n            prop=\"pkgname\"\n            :label=\"$t('linuxPkgControl.productName')\"\n            min-width=\"140\"\n            >\n            </el-table-column>\n\n            <el-table-column\n            prop=\"versionname\"\n            :label=\"$t('linuxPkgControl.version')\"\n            min-width=\"100\"\n            >\n            </el-table-column>\n            \n            <el-table-column\n            :label=\"$t('linuxPkgControl.beginTime')\"\n            min-width=\"130\"\n            prop=\"ts\"\n                >\n                <template slot-scope=\"scope\">\n                    {{scope.row.ts|time}}\n                </template>\n            </el-table-column>\n\n            <el-table-column\n            prop=\"target\"\n            :label=\"$t('linuxPkgControl.function')\"\n            min-width=\"120\"\n            >\n                <template slot-scope=\"scope\">\n                    {{scope.row.target|appStatusFunction}}\n                </template>\n            </el-table-column>\n            <el-table-column\n            column-key=\"status\"\n            prop=\"status\"\n            :label=\"$t('linuxPkgControl.installStatus')\"\n            min-width=\"140\"\n            :filters=\"[{ text: $t('global.success'), value: 2 }, { text: $t('global.failed'), value: 1 }, {text: $t('global.running'), value: 0}]\"\n            filter-placement=\"bottom-end\"\n            >\n                <template slot-scope=\"scope\">\n                    <img src=\"@/assets/imgs/loading1.gif\" alt=\"\" style=\"width:50px;height:10px;\"v-if=\"scope.row.status==0\">\n                    <span v-if=\"scope.row.status==2\" class=\"badge bg-green\">{{$t('global.success')}}</span>\n                    <span v-if=\"scope.row.status==1\" class=\"badge bg-DimGray\">{{$t('global.failed')}}</span>\n                    <!-- {{scope.row.upstatus|AppStatus}} -->\n                </template>\n            </el-table-column>\n\n            <el-table-column\n            :label=\"$t('linuxPkgControl.errorStatus')\"\n            min-width=\"100\"\n            >\n                <template slot-scope=\"scope\">\n                    {{(\"\"+scope.row.errorcode)|appErrorStatus}}\n                </template>\n            </el-table-column>\n\n            <el-table-column\n            :label=\"$t('linuxPkgControl.action')\"\n            min-width=\"175\"\n            align=\"center\">\n                <template slot-scope=\"scope\">\n                    <div>\n                        <el-button-group>\n                            <!-- :disabled=\"scope.row.status==0\" -->\n                            <el-button \n                                size=\"mini\" \n                                type=\"danger\"\n                                @click=\"deleteHistory(scope.row.aisid)\"\n                                \n                                >\n                                    {{$t('global.delete')}}\n                            </el-button>\n                            <el-button \n                                size=\"mini\" \n                                type=\"primary\"\n                                @click=\"reinstall(scope.row)\"\n                                :disabled=\"scope.row.status!=1\"\n                                >\n                                    {{$t('linuxPkgControl.repeat')}}\n                            </el-button>\n                        </el-button-group>\n                    </div>\n                </template>\n            </el-table-column>\n\n        </el-table>\n\n        <btn-group \n        :selectedData=\"multipleSelection\" \n        :isDelete=\"true\" \n        :isMove=\"false\" \n        tid=\"aisid\" \n        :delApi=\"batchDeleteAppStatusHistory\" \n        @result=\"isSuccess\" \n        v-show=\"isShowBtnGroup\"\n        class=\"fl m-t-10 cf\">\n        </btn-group>\n\n        <el-button \n        v-loading=\"clearLoading\" \n        size=\"small\" \n        @click=\"clearAll()\" \n        type=\"primary\" \n        class=\"fl m-t-10 cf m-l-10\"\n            v-show=\"isShowBtnGroup\">\n        {{$t('linuxPkgControl.clearAll')}}\n        </el-button>\n\n        <div class=\"m-t-10 cf fr\">\n            <el-pagination\n            @current-change=\"handleCurrentChange\"\n            layout=\"prev, pager, next\"\n            :page-size=\"limit\"\n            :current-page=\"currentPage\"\n            :total=\"dataCount\"\n            v-show=\"isshow\"\n            background\n            >\n            </el-pagination>\n            \n        </div> \n        \n       \n    </div>\n</template>\n<script>\n    import {linuxPkgControl} from '@/assets/js/lwm2mMap'\n    import {reExecDeviceStatus} from '@/components/restfulapi/deviceStatusApi';\n    import{\n    getAppStatusByTypeApi, \n    batchDeleteAppStatusHistoryApi, \n    deleteAppStatusHistoryApi, \n    deleteAppStatusHistoryAllByTypeApi,\n    deleteAppStatusHistoryAllApi,\n    getAppStatusOverviewApi,\n    getAppStatusByTypeAndDevIdApi, \n    getAppStatusByTypeAndGroupApi,\n    getAppStatusByTypeAndPageInGroupApi,\n    getAppStatusByTypeAndPageAndStatusInGroupApi,\n    getAppStatusByTypeAndPageInDevIdApi,\n    getAppStatusByTypeAndPageAndStatusInDevIdApi,\n    deleteAppStatusHistoryAllByDevIdAndTypeApi,\n    deleteAppStatusHistoryAllByGroupAndTypeApi\n    } from \"@/components/restfulapi/appStatusApi\"\n    import {setLocal, getLocal, getSession, checkSession, setSession} from \"../../../assets/js/storage\"\n\n    import handleResponse from '@/components/restfulapi/handleResponse'\n    import btnGroup from \"../../../common/btn-group\";\n    import {singleDebType, batchDebType} from \"../../../assets/js/constant\"\n\nexport default {\n    name: 'linuxPkgControlHistory',\n    data() {\n        return {\n            pkgStatusHistoryTableList: [],\n            isshow: false,\n            limit: 10,\n            dataCount: 0,\n            currentPage: 1,\n            multipleSelection: [],\n            isShowBtnGroup: false,\n            clearLoading: false,\n            batchDeleteAppStatusHistory:  batchDeleteAppStatusHistoryApi,\n            intervalTime: 7000,\n\n            isInterval: false,\n            listLoading: false,\n            singleDebType,\n            batchDebType,\n            statusArray: [],\n        }\n    },\n\n    components: {\n        btnGroup,\n    },\n\n    props: {\n        statusType: {\n            default: batchDebType,\n            type: String\n        },\n\n        selectedAgentId: {\n            default: \"\",\n            type: String\n        },\n\n        groupname: {\n            default: \"\",\n            type: String\n        }\n    },\n    methods: {\n        selectItem(val) {\n            this.multipleSelection = val;\n        },\n\n        checkSelectable(row) {\n            return !row.status==0;\n        },\n\n        handleCurrentChange(currentPage){\n            if(currentPage){\n                this.currentPage = currentPage;\n            }else{\n                this.currentPage = 1\n            }\n            this.intervalGetPkgStatusHistory();\n        },\n\n        deleteHistory(aisid){\n            _g.swalInfoDo(this.$t('global.areYouSure'), this.$t('global.delete'), this.$t('global.confirm'), this.$t('global.cancel')).then((result) => {\n                if(result){\n                    this.listLoading = true;\n                    deleteAppStatusHistoryApi(aisid).then((data) => {\n                        this.listLoading = false;\n                        handleResponse(data, (res) => {\n                            if(res.status === \"CHANGED\"){\n                                this.$swal(\"\", this.$t('global.success'), \"success\", {button: this.$t('global.confirm')}).then(() => {\n                                        this.intervalGetPkgStatusHistory();\n                                })\n                            }else{\n                                _g.handleError(res);\n                            }\n                        })\n                    })\n                }\n            }) \n        },\n\n        checkAppStatusData(){\n            if(this.statusType == batchDebType){\n                getAppStatusByTypeAndGroupApi(this.groupname, this.statusType)\n            }else{\n                getAppStatusByTypeAndDevIdApi(this.selectedAgentId, this.statusType)\n            }\n        },\n\n        getAppStatusHistoryByGroupname(){\n            if(!this.groupname){\n                console.error(\"[getAppStatusHistoryByGroupname]groupname is empty\")\n            }\n            if(this.isInterval === false){\n                this.listLoading = true;\n            }\n            \n            if(this.statusArray.length > 0){\n                getAppStatusByTypeAndPageAndStatusInGroupApi(this.groupname, this.statusType, this.currentPage, this.limit, this.statusArray).then((data) => {\n                    this.listLoading = false;\n                    handleResponse(data, (res) => {\n                        this.assignAppStatusData(res);\n                    })\n                })\n            }else{\n                getAppStatusByTypeAndPageInGroupApi(this.groupname, this.statusType, this.currentPage, this.limit).then((data) => {\n                    this.listLoading = false;\n                    handleResponse(data, (res) => {\n                        this.assignAppStatusData(res);\n                    })\n                })\n            }\n            \n        },\n\n        getAppStatusHistoryBydevid(){\n            if(!this.selectedAgentId){\n                console.error(\"[getAppStatusHistoryBydevid]selectedAgentId is empty\")\n            }\n\n            if(this.isInterval === false){\n                this.listLoading = true;\n            }\n            if(this.statusArray.length > 0){\n                getAppStatusByTypeAndPageAndStatusInDevIdApi(this.selectedAgentId, this.statusType, this.currentPage, this.limit, this.statusArray).then((data) => {\n                    this.listLoading = false;\n                    handleResponse(data, (res) => {\n                        this.assignAppStatusData(res);\n                    })\n                })\n            }else{\n                getAppStatusByTypeAndPageInDevIdApi(this.selectedAgentId, this.statusType, this.currentPage, this.limit).then((data) => {\n                    this.listLoading = false;\n                    handleResponse(data, (res) => {\n                        this.assignAppStatusData(res);\n                    })\n                })\n            }\n        },\n\n        assignAppStatusData(res){\n            if(Object.prototype.toString.call(res)  === '[object Object]'&& Object.prototype.toString.call(res.data) === '[object Array]'){\n                this.dataCount = res.count;\n                this.pkgStatusHistoryTableList = res.data\n                this.isshow = this.dataCount > this.limit;\n                this.isShowBtnGroup = this.dataCount > 0;\n                let isFinish = true;\n                if(this.statusType == batchDebType){\n                    this.$emit(\"getStatusCount\")\n                }\n\n                res.data.forEach((val) => {\n                    if(val.status == 0){\n                        isFinish = false;\n                    }\n                })\n                if(isFinish){\n                    \n                    this.$emit(\"isFinished\");\n                    \n                    window.clearInterval(_g.timer);\n                    _g.timer = null;\n                }\n            }else{\n                window.clearInterval(_g.timer);\n                _g.timer = null;\n            }\n        },\n\n        intervalGetPkgStatusHistory(){\n            if(this.statusType == batchDebType){\n                this.getAppStatusHistoryByGroupname();\n                if(_g.timer === null){\n                    _g.timer = window.setInterval(() => {\n                        this.getAppStatusHistoryByGroupname();\n                        this.isInterval = true;\n                    },this.intervalTime)\n                } \n            }else{\n                this.getAppStatusHistoryBydevid();\n                if(_g.timer === null){\n                    _g.timer = window.setInterval(() => {\n                        this.getAppStatusHistoryBydevid();\n                        this.isInterval = true;\n                    },this.intervalTime)\n                }\n            }\n        },\n\n\n        filterStatus(value){\n            this.statusArray = value.status;\n            this.currentPage = 1;\n            if(_g.isArray(this.statusArray)){\n                this.intervalGetPkgStatusHistory();\n            }\n        },\n\n        resetAppSensor(sensorId, selectedAgentId, appdata){\n            this.listLoading = true;\n            reExecDeviceStatus(selectedAgentId, sensorId, appdata).then((data) => {\n                this.listLoading = false;\n                handleResponse(data, (res) => {\n                    if(res.status == \"CHANGED\"){\n                        this.activeName = \"appStatusHistory\";\n                        this.currentPage = 1;\n                        this.intervalGetPkgStatusHistory();\n                    }else{\n                        _g.handleError(res)\n                    }\n                })\n                \n            })\n            \n        },\n\n        reinstall(appItem){\n            _g.swalInfoDo(this.$t('global.areYouSure'), this.$t('linuxPkgControl.repeat'), this.$t('global.confirm'), this.$t('global.cancel')).then((result) => {\n                if(result){\n                    let appdata = {\n                        taskname: appItem.taskname,\n                        productname: appItem.pkgname,\n                        version: appItem.versionname,\n                        downloadpath: appItem.address,\n                        type: appItem.type\n                    }\n                    this.resetAppSensor(appItem.target, appItem.deviceId, appdata);\n                }\n            })\n        },\n\n        //delete appstatus $emit\n        isSuccess(result){\n            if(result){\n                this.intervalGetPkgStatusHistory();\n            }\n        },\n\n         //clear All history\n        clearAll(){\n            _g.swalInfoDo(this.$t('global.areYouSure'), this.$t('global.clearAll'), this.$t('global.confirm'), this.$t('global.cancel')).then((result) => {\n                if(result){\n                    this.clearLoading = true;\n                    if(this.statusType == batchDebType){\n                        deleteAppStatusHistoryAllByGroupAndTypeApi(this.groupname, this.statusType).then((data) => {\n                            this.clearLoading = false;\n                            handleResponse((data), (res) => {\n                                if(res.status === \"CHANGED\"){\n                                    this.$swal(\"\", this.$t('global.success'), \"success\", {button: this.$t('global.confirm')}).then(() => {\n                                            this.intervalGetPkgStatusHistory();\n                                    })\n                                }else{\n                                    _g.handleError(res);\n                                }\n                            })\n                        })\n                    }else{\n                        deleteAppStatusHistoryAllByDevIdAndTypeApi(this.selectedAgentId, this.statusType).then((data) => {\n                            this.clearLoading = false;\n                            handleResponse((data), (res) => {\n                                if(res.status === \"CHANGED\"){\n                                    this.$swal(\"\", this.$t('global.success'), \"success\", {button: this.$t('global.confirm')}).then(() => {\n                                            this.intervalGetPkgStatusHistory();\n                                    })\n                                }else{\n                                    _g.handleError(res);\n                                }\n                            })\n                        })\n                    }  \n                }\n            })\n\n        },\n\n        initData(){\n            this.pkgStatusHistoryTableList = [];\n            this.isShowBtnGroup= false;\n            this.isshow= false;\n            this.isInterval = false;\n            this.currentPage = 1;\n        }\n\n\n    },\n\n    created(){\n        if(this.statusType == batchDebType){\n            this.$emit(\"getStatusCount\")\n        }\n    },\n    beforeDestroy() {\n         window.clearInterval(_g.timer);\n        _g.timer = null;\n    },\n\n    watch: {\n        groupname(val){\n            if(val){\n                this.initData();\n                this.checkAppStatusData();\n                this.intervalGetPkgStatusHistory();\n                \n            }  \n　　　　　},\n        selectedAgentId(val){\n            if(val){\n                this.initData();\n                this.checkAppStatusData();\n                this.intervalGetPkgStatusHistory();\n                \n            }  \n　　　　　},\n\n    },\n        \n}\n</script>\n<style lang=\"scss\" scoped>\n@import \"@/assets/css/colors.scss\";\n    .badge{\n        display: inline-block;\n        min-width: 10px;\n        padding: 5px 8px;\n        font-size: 12px;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: middle;\n        border-radius: 10px;\n    }\n\n    .el-loading-mask{\n        top: 60px !important;\n    }\n\n\n    \n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/deploy/linuxcontroldetails/history.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('el-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.listLoading),expression:\"listLoading\"}],ref:\"pkgStatusHistoryTable\",staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.pkgStatusHistoryTableList,\"tooltip-effect\":\"dark\",\"default-sort\":{prop: 'ts', order: 'descending'},\"header-cell-style\":{background:'#fafafa',color:'#606266'}},on:{\"selection-change\":_vm.selectItem,\"filter-change\":_vm.filterStatus}},[_c('el-table-column',{attrs:{\"type\":\"selection\",\"min-width\":\"50\",\"selectable\":_vm.checkSelectable}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"devname\",\"label\":_vm.$t('linuxPkgControl.deviceName'),\"min-width\":\"120\"}}),_vm._v(\" \"),(_vm.statusType == _vm.batchDebType)?_c('el-table-column',{attrs:{\"prop\":\"taskname\",\"label\":_vm.$t('linuxPkgControl.taskName'),\"min-width\":\"120\"}}):_vm._e(),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"pkgname\",\"label\":_vm.$t('linuxPkgControl.productName'),\"min-width\":\"140\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"versionname\",\"label\":_vm.$t('linuxPkgControl.version'),\"min-width\":\"100\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"label\":_vm.$t('linuxPkgControl.beginTime'),\"min-width\":\"130\",\"prop\":\"ts\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_vm._v(\"\\n                \"+_vm._s(_vm._f(\"time\")(scope.row.ts))+\"\\n            \")]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"target\",\"label\":_vm.$t('linuxPkgControl.function'),\"min-width\":\"120\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_vm._v(\"\\n                \"+_vm._s(_vm._f(\"appStatusFunction\")(scope.row.target))+\"\\n            \")]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"column-key\":\"status\",\"prop\":\"status\",\"label\":_vm.$t('linuxPkgControl.installStatus'),\"min-width\":\"140\",\"filters\":[{ text: _vm.$t('global.success'), value: 2 }, { text: _vm.$t('global.failed'), value: 1 }, {text: _vm.$t('global.running'), value: 0}],\"filter-placement\":\"bottom-end\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [(scope.row.status==0)?_c('img',{staticStyle:{\"width\":\"50px\",\"height\":\"10px\"},attrs:{\"src\":require(\"@/assets/imgs/loading1.gif\"),\"alt\":\"\"}}):_vm._e(),_vm._v(\" \"),(scope.row.status==2)?_c('span',{staticClass:\"badge bg-green\"},[_vm._v(_vm._s(_vm.$t('global.success')))]):_vm._e(),_vm._v(\" \"),(scope.row.status==1)?_c('span',{staticClass:\"badge bg-DimGray\"},[_vm._v(_vm._s(_vm.$t('global.failed')))]):_vm._e()]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"label\":_vm.$t('linuxPkgControl.errorStatus'),\"min-width\":\"100\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_vm._v(\"\\n                \"+_vm._s(_vm._f(\"appErrorStatus\")((\"\"+scope.row.errorcode)))+\"\\n            \")]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"label\":_vm.$t('linuxPkgControl.action'),\"min-width\":\"175\",\"align\":\"center\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[_c('el-button-group',[_c('el-button',{attrs:{\"size\":\"mini\",\"type\":\"danger\"},on:{\"click\":function($event){_vm.deleteHistory(scope.row.aisid)}}},[_vm._v(\"\\n                                \"+_vm._s(_vm.$t('global.delete'))+\"\\n                        \")]),_vm._v(\" \"),_c('el-button',{attrs:{\"size\":\"mini\",\"type\":\"primary\",\"disabled\":scope.row.status!=1},on:{\"click\":function($event){_vm.reinstall(scope.row)}}},[_vm._v(\"\\n                                \"+_vm._s(_vm.$t('linuxPkgControl.repeat'))+\"\\n                        \")])],1)],1)]}}])})],1),_vm._v(\" \"),_c('btn-group',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isShowBtnGroup),expression:\"isShowBtnGroup\"}],staticClass:\"fl m-t-10 cf\",attrs:{\"selectedData\":_vm.multipleSelection,\"isDelete\":true,\"isMove\":false,\"tid\":\"aisid\",\"delApi\":_vm.batchDeleteAppStatusHistory},on:{\"result\":_vm.isSuccess}}),_vm._v(\" \"),_c('el-button',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.clearLoading),expression:\"clearLoading\"},{name:\"show\",rawName:\"v-show\",value:(_vm.isShowBtnGroup),expression:\"isShowBtnGroup\"}],staticClass:\"fl m-t-10 cf m-l-10\",attrs:{\"size\":\"small\",\"type\":\"primary\"},on:{\"click\":function($event){_vm.clearAll()}}},[_vm._v(\"\\n    \"+_vm._s(_vm.$t('linuxPkgControl.clearAll'))+\"\\n    \")]),_vm._v(\" \"),_c('div',{staticClass:\"m-t-10 cf fr\"},[_c('el-pagination',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isshow),expression:\"isshow\"}],attrs:{\"layout\":\"prev, pager, next\",\"page-size\":_vm.limit,\"current-page\":_vm.currentPage,\"total\":_vm.dataCount,\"background\":\"\"},on:{\"current-change\":_vm.handleCurrentChange}})],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?{\"id\":\"data-v-54839d92\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&index=0!./src/components/deploy/linuxcontroldetails/history.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-54839d92\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=styles&index=0!./history.vue\")\n}\nvar normalizeComponent = require(\"!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./history.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./history.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-54839d92\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=template&index=0!./history.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-54839d92\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/deploy/linuxcontroldetails/history.vue\n// module id = null\n// module chunks = ","<template>\n    <div v-show=\"isSingleMode\" class=\"p-r\">\n        <div class=\"search\" v-show=\"isShowSearchInput\"> \n            <el-input size=\"small\" class=\"w-250 m-l-10\" v-model=\"keywords\" :placeholder=\"$t('linuxPkgControl.keywordHolder')\" >  \n            </el-input>\n            <i class=\"fa fa-search search-icon\" aria-hidden=\"true\"></i>\n        </div>\n        <el-tabs v-model=\"activeName\" @tab-click=\"handleClick\">\n            <el-tab-pane name=\"linuxMarket\">\n                <span slot=\"label\">\n                    <i class=\"fa fa-sellsy m-r-5\" aria-hidden=\"listLoading\"></i>\n                     {{$t('linuxPkgControl.pkgMarket')}}\n                </span>\n                <el-table\n                    :data=\"pkgTableData.filter(data => !keywords || data.productname.toLowerCase().includes(keywords.toLowerCase()))\"\n                    tooltip-effect=\"dark\"\n                    style=\"width: 100%\"\n                    v-loading=\"listLoading\"\n                    :header-cell-style=\"{background:'#fafafa',color:'#606266'}\"\n                    >\n\n                    <el-table-column\n                    label=\"\"\n                    width=\"100\"\n                    >\n                        <template slot-scope=\"scope\">\n                            <div>\n                                <img src=\"@/assets/imgs/deb.png\"  alt=\"no img\" style=\"width:52px\" v-if=\"scope.row.filetype=='deb'\"/>\n                                <img src=\"@/assets/imgs/package.png\"  alt=\"no img\" style=\"width:48px\" v-if=\"scope.row.filetype=='tar'\"/>\n                            </div>\n                        </template>\n                    </el-table-column>\n                    <el-table-column\n                    prop=\"filename\"\n                    :label=\"$t('linuxPkgControl.fileName')\"\n                    min-width=\"120\"\n                    >\n                    </el-table-column>\n                    <el-table-column\n                    prop=\"productname\"\n                    :label=\"$t('linuxPkgControl.productName')\"\n                    min-width=\"120\"\n                    sortable\n                    >\n                    </el-table-column>\n\n                    <el-table-column\n                    prop=\"version\"\n                    :label=\"$t('linuxPkgControl.version')\"\n                    min-width=\"120\"\n                    sortable>\n                    </el-table-column>\n                    <el-table-column\n                    prop=\"filetype\"\n                    :label=\"$t('linuxPkgControl.fileType')\"\n                    min-width=\"120\"\n                    :filters=\"[{ text: $t('linuxPkgControl.debPkg'), value: 'deb' }, { text: $t('linuxPkgControl.compressPkg'), value: 'tar' }]\"\n                    :filter-method=\"filterFileType\"\n                    filter-placement=\"bottom-end\"\n                    >\n                        <template slot-scope=\"scope\">\n                            <div>\n                                <span v-if=\"scope.row.filetype == 'deb'\">\n                                    {{$t('linuxPkgControl.debPkg')}}\n                                </span>\n                                <span v-if=\"scope.row.filetype == 'tar'\">\n                                    {{$t('linuxPkgControl.compressPkg')}}\n                                </span>\n                            </div>\n                        </template>\n                    </el-table-column>\n                    <el-table-column\n                    prop=\"type\"\n                    :label=\"$t('linuxPkgControl.action')\"\n                    min-width=\"120\"\n                    :filters=\"[{ text: $t('linuxPkgControl.uninstall'), value: 'uninstall' }, { text: $t('linuxPkgControl.install'), value: 'install' }, { text: $t('linuxPkgControl.upgrade'), value: 'upgrade' }]\"\n                    :filter-method=\"filterType\"\n                    filter-placement=\"bottom-end\"\n                    >\n                        <template slot-scope=\"scope\">\n                            <div>\n                                <span>\n                                    <el-button-group>\n                                        <el-button \n                                        size=\"small\" \n                                        type=\"danger\" \n                                        @click=\"appAction('uninstall', scope.row)\"\n                                        v-if=\"scope.row.type === 'uninstall'\"\n                                        >\n                                            {{$t('linuxPkgControl.uninstall')}}\n                                        </el-button>\n                                        <el-button \n                                        size=\"small\" \n                                        type=\"warning\" \n                                        @click=\"appAction('upgrade', scope.row)\" \n                                        v-if=\"scope.row.type === 'upgrade'\"\n                                        >\n                                            {{$t('linuxPkgControl.upgrade')}}\n                                        </el-button>\n                                        <el-button \n                                        size=\"small\" \n                                        type=\"primary\" \n                                        @click=\"appAction('install', scope.row)\" \n                                        v-if=\"scope.row.type === 'install'\"\n                                        >\n                                            {{$t('linuxPkgControl.install')}}\n                                        </el-button>\n                                    </el-button-group>\n                                </span>\n                            </div>\n                        </template>\n                    </el-table-column>\n                </el-table>\n            </el-tab-pane>\n            <el-tab-pane name=\"pkgStatusHistory\">\n                <span slot=\"label\">\n                    <i class=\"fa fa-history m-r-5\" aria-hidden=\"true\"></i>\n                    {{$t('linuxPkgControl.linuxManagerHistory')}}\n                </span>\n                <pkg-history\n                :statusType=\"singleDebType\"\n                ref=\"pkgHistory\"\n                @isFinished=\"isFinished\"\n                :selectedAgentId=\"selectedAgentId\"\n                >\n                </pkg-history>\n            </el-tab-pane>\n        </el-tabs>\n    </div>\n    \n</template>\n\n\n<script>\n    import {linuxPkgControl} from '@/assets/js/lwm2mMap'\n    import handleResponse from '@/components/restfulapi/handleResponse'\n    import {getDeviceStatus, setDeviceStatus, execDeviceStatus } from '@/components/restfulapi/deviceStatusApi';\n    import {getRepoLinuxPkgsApi} from '../../../components/restfulapi/getRepoLinuxPackageApi';\n    import {getSession, checkSession, setSession } from '../../../assets/js/storage';\n    import {singleDebType, batchDebType} from \"../../../assets/js/constant\";\n    import pkgHistory from \"./history\"\n\n    export default{\n        name: 'singlelinuxPkgControl',\n        data(){\n            return {\n                activeName: \"linuxMarket\",\n                pkgTableData: [],\n                defaultImg: 'this.src=\"' + 'static/imgs/linux_package.png' + '\"',\n                //history\n                singleDebType,\n                //card\n                listLoading: false,\n                keywords: '',\n            }\n        },\n\n        props: {\n            selectedAgentId: {\n                type: String,\n                default: \"\"\n            },\n            isSingleMode: {\n                type: Boolean,\n                default: true\n            },\n            //selectedAgent is offline\n            isOffline: {\n                type: Boolean,\n                default: false\n            }\n        },\n        components: {\n            pkgHistory,\n        },\n\n        methods:{\n            getSensorStatus(){\n                if(!this.isSingleMode) {\n                    console.error(\"Cannot operate in a batch mode\");\n                    return;\n                }\n                if(this.selectedAgentId == \"\"){\n                    console.error(\"selectAgentId is empty\");\n                    return;\n                }\n                let pkgManagementInfoArray = [];\n                let devicePkgArray = [];\n                this.listLoading = true;\n\n                // [{\\\"appname\\\":\\\"gedit\\\",\\\"pkgtype\\\":\\\"debian\\\",\\\"pkgname\\\":\\\"gedit\\\",\\\"description\\\":\\\"\\\",\\\"updatetime\\\":\\\"1600914216518\\\",\\\"version\\\":\\\"3.22.0-2\\\",\\\"status\\\":\\\"created\\\"}]\n                getDeviceStatus(this.selectedAgentId, linuxPkgControl[\"getPkgInfo\"]).then((obj) => {\n                    this.listLoading = false;\n                    handleResponse(obj, (res) => {\n                        if(res.status == \"CONTENT\"){\n                            if(res.content.value){\n                                let allPkgData = JSON.parse(res.content.value);\n                                if(Object.prototype.toString.call(allPkgData) === \"[object Array]\" && allPkgData.length > 0){\n                                    allPkgData.forEach((val) => {\n                                        let type;\n                                        if(val.pkgtype == \"compressed\"){\n                                            type = \"tar\";\n                                        }else if(val.pkgtype == \"debian\"){\n                                            type = \"deb\";\n                                        }\n                                        let uninstallPkgObj = {\n                                            type: 'uninstall',\n                                            filename: val.pkgname,\n                                            productname: val.appname,\n                                            version: val.version,\n                                            address: val.address,\n                                            filetype: type\n                                        };\n                                        pkgManagementInfoArray.push(uninstallPkgObj);\n                                        devicePkgArray.push(uninstallPkgObj);  \n                                    })\n                                }\n                            }\n                            this.getRepoPkgs(pkgManagementInfoArray, devicePkgArray);  \n                        } \n                    })   \n                })\n            },\n            // Deletes an object of a particular value in array\n            removeObjInArray(originData, rem_pkg_val){\n                if(Object.prototype.toString.call(originData) === \"[object Array]\"){\n                    originData.forEach((obj_val, index) => {\n                        if(obj_val.productname === rem_pkg_val){\n                            originData.splice(index ,1)\n                        }\n                    })\n                }else{\n                     console.error(\"data is not array\")\n                     return;\n                }\n            },\n            //get repo apps\n            getRepoPkgs(pkgManagementInfoArray, devicePkgArray){\n                if(\n                    Object.prototype.toString.call(pkgManagementInfoArray) != \"[object Array]\" ||\n                    Object.prototype.toString.call(devicePkgArray) != \"[object Array]\"\n                ){\n                    console.error(\"getRepoPkgs　parameter is not array\")\n                    return;\n                }\n                let token;\n                let InstallPkgManagementInfo = {};\n                let UpgradePkgManagementInfo = {};\n                this.listLoading = true;\n                getRepoLinuxPkgsApi().then((data) => {\n                    this.listLoading = false;\n                    handleResponse(data, (res) => {\n                       if(res.status === \"success\"){\n                            if(Object.prototype.toString.call(res.data) === \"[object Array]\"){\n                                res.data.forEach((val) => {\n                                    let version = val.versionName != null ? val.versionName:\"\";\n                                    InstallPkgManagementInfo = {\n                                        type : \"install\", \n                                        filename: val.filename, \n                                        productname: val.productname, \n                                        version: val.version, \n                                        address: val.address,\n                                        filetype: val.type\n                                    };\n                                    pkgManagementInfoArray.push(InstallPkgManagementInfo);\n                                    devicePkgArray.forEach((deviceapp_val, index) => {\n                                        if(deviceapp_val.productname == val.productname){\n                                            // pop latest app info\n                                            pkgManagementInfoArray.pop();\n                                            devicePkgArray[index].address = val.address;\n                                            if (_g.cpr_version(val.version, deviceapp_val.version)){  \n                                                UpgradePkgManagementInfo = {\n                                                    type : \"upgrade\", \n                                                    filename: val.filename, \n                                                    productname: val.productname, \n                                                    version: val.version, \n                                                    address: val.address,\n                                                    filetype: val.type\n                                                };\n                                                    //push update app \n                                                pkgManagementInfoArray.push(UpgradePkgManagementInfo);     \n                                                \n                                            }\n                                            \n                                        }\n                                    })\n                                })\n                            }\n                            \n                        }\n                        this.pkgTableData = pkgManagementInfoArray.reverse();\n                    })\n                    \n                })\n            },\n\n            filterType(value, row){\n                return row.type === value ;\n            },\n            filterFileType(value, row){\n                return row.filetype === value;\n            },\n            actionAppSensor(cid, appdata){\n                if(linuxPkgControl[cid] === undefined){\n                    this.$swal(\"\", this.$t('global.functionNotSupport'), 'info', {button: this.$t('global.confirm')});\n                    return;\n                }\n                if(!this.selectedAgentId){\n                    this.$swal(\"\",this.$t('global.selectDevice'),\"info\", {button: this.$t('global.confirm')})\n                    return;\n                }\n\n                _g.swalWarnDo(this.$t('global.areYouSure'), this.$t(\"linuxPkgControl.\"+cid), this.$t('global.confirm'), this.$t('global.cancel')).then((willfunc) => {\n                    if (willfunc) {\n                        _g.openGlobalLoading();\n                        execDeviceStatus(this.selectedAgentId, linuxPkgControl[cid], appdata).then((data) => {\n                            handleResponse(data, (res) => {\n                                if(res.status == \"CHANGED\"){\n                                    this.activeName = \"pkgStatusHistory\";\n                                    this.$refs.pkgHistory.intervalGetPkgStatusHistory();\n                                }else{\n                                    _g.handleError(res)\n                                }\n                            })\n                        })\n                    }\n                })\n            },\n\n            isFinished(){\n                if(this.selectedAgentId){\n                    if(!this.isOffline){\n                        this.getSensorStatus();\n                    }\n                }\n            },\n\n            appAction(cid, selectedAppData){\n                \n                    let setsensorval, version, productname;\n                    setsensorval = selectedAppData.address + \"/\" +  selectedAppData.filename;\n                    let taskname = this.singleDebType+ (new Date()).getTime();\n                    let pkgdata = {\n                        taskname,\n                        productname: selectedAppData.productname,\n                        version: selectedAppData.version,\n                        downloadpath: setsensorval,\n                        type: this.singleDebType\n                    }\n                    this.actionAppSensor(cid, pkgdata)\n                \n                \n            },\n            initData(){\n                this.startApp = '';\n                this.stopApp = '';\n                this.enableApp = '';\n                this.disableApp = '';\n                this.pkgTableData = [];\n            },\n            handleClick(tab){\n                if(tab.name === \"pkgStatusHistory\"){\n                    this.$emit(\"isDisabled\", false)\n                }else{\n                    this.$emit(\"isDisabled\", true)\n                }\n            },\n        },\n        watch: {\n            isSingleMode(val){\n                if(val){\n                    this.initData();\n                }\n            },\n            selectedAgentId(val){\n                if(this.isSingleMode) {\n                    this.initData();\n\n                    if(val&& !this.isOffline){\n                        this.getSensorStatus();\n\n                        // this.$refs.pkgHistory.intervalGetPkgStatusHistory();\n                    }\n                }\n            },\n           \n        },\n        computed: {\n            isShowSearchInput(){\n                if(this.activeName === \"linuxMarket\"){\n                    return true;\n                }else{\n                    return false;\n                }\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .noData{\n        margin-top: 30px;\n        p{\n            img{\n                width: 27px;\n                vertical-align: middle;\n            }\n            margin-bottom: 20px;\n            color: #bfbfbf;\n            font-size: 21px;\n        }\n    }\n\n    .search{\n        position: absolute;\n        top: 3px;\n        right: 15px;\n        width: 230px;\n        z-index: 1001;\n        .search-icon{\n            position: absolute;\n            top: 6px;\n            right: 1px;\n            color: #ddd;\n            z-index: 10001;\n        }\n    }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/deploy/linuxcontroldetails/single.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isSingleMode),expression:\"isSingleMode\"}],staticClass:\"p-r\"},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isShowSearchInput),expression:\"isShowSearchInput\"}],staticClass:\"search\"},[_c('el-input',{staticClass:\"w-250 m-l-10\",attrs:{\"size\":\"small\",\"placeholder\":_vm.$t('linuxPkgControl.keywordHolder')},model:{value:(_vm.keywords),callback:function ($$v) {_vm.keywords=$$v},expression:\"keywords\"}}),_vm._v(\" \"),_c('i',{staticClass:\"fa fa-search search-icon\",attrs:{\"aria-hidden\":\"true\"}})],1),_vm._v(\" \"),_c('el-tabs',{on:{\"tab-click\":_vm.handleClick},model:{value:(_vm.activeName),callback:function ($$v) {_vm.activeName=$$v},expression:\"activeName\"}},[_c('el-tab-pane',{attrs:{\"name\":\"linuxMarket\"}},[_c('span',{attrs:{\"slot\":\"label\"},slot:\"label\"},[_c('i',{staticClass:\"fa fa-sellsy m-r-5\",attrs:{\"aria-hidden\":\"listLoading\"}}),_vm._v(\"\\n                 \"+_vm._s(_vm.$t('linuxPkgControl.pkgMarket'))+\"\\n            \")]),_vm._v(\" \"),_c('el-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.listLoading),expression:\"listLoading\"}],staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.pkgTableData.filter(function (data) { return !_vm.keywords || data.productname.toLowerCase().includes(_vm.keywords.toLowerCase()); }),\"tooltip-effect\":\"dark\",\"header-cell-style\":{background:'#fafafa',color:'#606266'}}},[_c('el-table-column',{attrs:{\"label\":\"\",\"width\":\"100\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[(scope.row.filetype=='deb')?_c('img',{staticStyle:{\"width\":\"52px\"},attrs:{\"src\":require(\"@/assets/imgs/deb.png\"),\"alt\":\"no img\"}}):_vm._e(),_vm._v(\" \"),(scope.row.filetype=='tar')?_c('img',{staticStyle:{\"width\":\"48px\"},attrs:{\"src\":require(\"@/assets/imgs/package.png\"),\"alt\":\"no img\"}}):_vm._e()])]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"filename\",\"label\":_vm.$t('linuxPkgControl.fileName'),\"min-width\":\"120\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"productname\",\"label\":_vm.$t('linuxPkgControl.productName'),\"min-width\":\"120\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"version\",\"label\":_vm.$t('linuxPkgControl.version'),\"min-width\":\"120\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"filetype\",\"label\":_vm.$t('linuxPkgControl.fileType'),\"min-width\":\"120\",\"filters\":[{ text: _vm.$t('linuxPkgControl.debPkg'), value: 'deb' }, { text: _vm.$t('linuxPkgControl.compressPkg'), value: 'tar' }],\"filter-method\":_vm.filterFileType,\"filter-placement\":\"bottom-end\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[(scope.row.filetype == 'deb')?_c('span',[_vm._v(\"\\n                                \"+_vm._s(_vm.$t('linuxPkgControl.debPkg'))+\"\\n                            \")]):_vm._e(),_vm._v(\" \"),(scope.row.filetype == 'tar')?_c('span',[_vm._v(\"\\n                                \"+_vm._s(_vm.$t('linuxPkgControl.compressPkg'))+\"\\n                            \")]):_vm._e()])]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"type\",\"label\":_vm.$t('linuxPkgControl.action'),\"min-width\":\"120\",\"filters\":[{ text: _vm.$t('linuxPkgControl.uninstall'), value: 'uninstall' }, { text: _vm.$t('linuxPkgControl.install'), value: 'install' }, { text: _vm.$t('linuxPkgControl.upgrade'), value: 'upgrade' }],\"filter-method\":_vm.filterType,\"filter-placement\":\"bottom-end\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[_c('span',[_c('el-button-group',[(scope.row.type === 'uninstall')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"danger\"},on:{\"click\":function($event){_vm.appAction('uninstall', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('linuxPkgControl.uninstall'))+\"\\n                                    \")]):_vm._e(),_vm._v(\" \"),(scope.row.type === 'upgrade')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"warning\"},on:{\"click\":function($event){_vm.appAction('upgrade', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('linuxPkgControl.upgrade'))+\"\\n                                    \")]):_vm._e(),_vm._v(\" \"),(scope.row.type === 'install')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"primary\"},on:{\"click\":function($event){_vm.appAction('install', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('linuxPkgControl.install'))+\"\\n                                    \")]):_vm._e()],1)],1)])]}}])})],1)],1),_vm._v(\" \"),_c('el-tab-pane',{attrs:{\"name\":\"pkgStatusHistory\"}},[_c('span',{attrs:{\"slot\":\"label\"},slot:\"label\"},[_c('i',{staticClass:\"fa fa-history m-r-5\",attrs:{\"aria-hidden\":\"true\"}}),_vm._v(\"\\n                \"+_vm._s(_vm.$t('linuxPkgControl.linuxManagerHistory'))+\"\\n            \")]),_vm._v(\" \"),_c('pkg-history',{ref:\"pkgHistory\",attrs:{\"statusType\":_vm.singleDebType,\"selectedAgentId\":_vm.selectedAgentId},on:{\"isFinished\":_vm.isFinished}})],1)],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?{\"id\":\"data-v-0b266828\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&index=0!./src/components/deploy/linuxcontroldetails/single.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-0b266828\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=styles&index=0!./single.vue\")\n}\nvar normalizeComponent = require(\"!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./single.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./single.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0b266828\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=template&index=0!./single.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-0b266828\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/deploy/linuxcontroldetails/single.vue\n// module id = null\n// module chunks = ","<template>\n    <div v-show=\"!isSingleMode\" class=\"pkgStatusContent p-r\">\n        <div class=\"search\" v-show=\"isShowSearchInput\"> \n            <el-input size=\"small\" class=\"w-250 m-l-10\" v-model=\"keywords\" :placeholder=\"$t('linuxPkgControl.keywordHolder')\" >\n            </el-input>\n            <i class=\"fa fa-search search-icon\" aria-hidden=\"true\"></i>\n        </div>\n\n        <el-tabs v-model=\"activeName\" @tab-click=\"handleClick\">\n            <el-tab-pane name=\"linuxMarket\">\n                <span slot=\"label\">\n                    <i class=\"fa fa-sellsy m-r-5\" aria-hidden=\"true\"></i>\n                    {{$t('linuxPkgControl.pkgMarket')}}\n                </span>\n                <el-table\n                    :data=\"pkgTableData.filter(data => !keywords || data.productname.toLowerCase().includes(keywords.toLowerCase()))\"\n                    tooltip-effect=\"dark\"\n                    style=\"width: 100%\"\n                    v-loading=\"listLoading\"\n                    :header-cell-style=\"{background:'#fafafa',color:'#606266'}\"\n                    >\n\n                    <el-table-column\n                    label=\"\"\n                    width=\"100\"\n                    >\n                        <template slot-scope=\"scope\">\n                            <div>\n                                <img src=\"@/assets/imgs/deb.png\"  alt=\"no img\" style=\"width:52px\" v-if=\"scope.row.filetype=='deb'\"/>\n                                <img src=\"@/assets/imgs/package.png\"  alt=\"no img\" style=\"width:48px\" v-if=\"scope.row.filetype=='tar'\"/>\n                            </div>\n                        </template>\n                    </el-table-column>\n                    <el-table-column\n                    prop=\"filename\"\n                    :label=\"$t('linuxPkgControl.fileName')\"\n                    min-width=\"120\"\n                    >\n                    </el-table-column>\n\n                    <el-table-column\n                    prop=\"productname\"\n                    :label=\"$t('linuxPkgControl.productName')\"\n                    min-width=\"120\"\n                    sortable\n                    >\n                    </el-table-column>\n\n                    <el-table-column\n                    prop=\"version\"\n                    :label=\"$t('linuxPkgControl.version')\"\n                    min-width=\"120\"\n                    sortable>\n                    </el-table-column>\n                     <el-table-column\n                    prop=\"filetype\"\n                    :label=\"$t('linuxPkgControl.fileType')\"\n                    min-width=\"120\"\n                    :filters=\"[{ text: $t('linuxPkgControl.debPkg'), value: 'deb' }, { text: $t('linuxPkgControl.compressPkg'), value: 'tar' }]\"\n                    :filter-method=\"filterFileType\"\n                    filter-placement=\"bottom-end\"\n                    >\n                        <template slot-scope=\"scope\">\n                            <div>\n                                <span v-if=\"scope.row.filetype == 'deb'\">\n                                    {{$t('linuxPkgControl.debPkg')}}\n                                </span>\n                                <span v-if=\"scope.row.filetype == 'tar'\">\n                                    {{$t('linuxPkgControl.compressPkg')}}\n                                </span>\n                            </div>\n                        </template>\n                    </el-table-column>\n                    <el-table-column\n                    prop=\"type\"\n                    :label=\"$t('linuxPkgControl.action')\"\n                    min-width=\"120\"\n                    :filters=\"[{ text: $t('linuxPkgControl.uninstall'), value: 'uninstall' }, { text: $t('linuxPkgControl.install'), value: 'install' }, { text: $t('linuxPkgControl.upgrade'), value: 'upgrade' }]\"\n                    :filter-method=\"filterType\"\n                    filter-placement=\"bottom-end\"\n                    >\n                        <template slot-scope=\"scope\">\n                            <div>\n                                <span>\n                                    <el-button-group>\n                                        <el-button \n                                        size=\"small\" \n                                        type=\"danger\" \n                                        @click=\"selectBatchinstallPkg('uninstall', scope.row)\"\n                                        v-if=\"scope.row.type === 'uninstall'\"\n                                        >\n                                            {{$t('linuxPkgControl.uninstall')}}\n                                        </el-button>\n                                        \n                                        <el-button \n                                        size=\"small\" \n                                        type=\"warning\" \n                                        @click=\"selectBatchinstallPkg('upgrade', scope.row)\" \n                                        v-if=\"scope.row.type === 'upgrade'\"\n                                        >\n                                            {{$t('linuxPkgControl.upgrade')}}\n                                        </el-button>\n                                        <el-button \n                                        size=\"small\" \n                                        type=\"primary\" \n                                        @click=\"selectBatchinstallPkg('install', scope.row)\" \n                                        v-if=\"scope.row.type === 'install'\"\n                                        >\n                                            {{$t('linuxPkgControl.install')}}\n                                        </el-button>\n                                    </el-button-group>\n                                </span>\n                            </div>\n                        </template>\n                    </el-table-column>\n                </el-table>\n            </el-tab-pane>\n            <el-tab-pane name=\"winStatusHistory\">\n                <span slot=\"label\">\n                    <i class=\"fa fa-history m-r-5\" aria-hidden=\"true\"></i>\n                    {{$t('linuxPkgControl.linuxManagerHistory')}}\n                </span>\n                <pkg-history\n                :statusType=\"batchDebType\"\n                ref=\"pkgHistory\"\n                @getStatusCount=\"getBatchAppStatusCount\"\n                :groupname=\"groupname\"\n                @isFinished=\"isFinished\"\n                >\n                </pkg-history>\n            </el-tab-pane>\n        </el-tabs>\n        <el-dialog :visible.sync=\"dialogTasknameVisible\" @close=\"initPkgInfo()\" :close-on-click-modal=\"false\">\n            <div slot=\"title\" class=\"dialog-title\">\n                <i class=\"fa fa-level-up m-r-10\" ></i>\n                {{$t('linuxPkgControl.batchInstallPkg')}}\n            </div>\n            <el-form :model=\"pkgStatusForm\" :rules=\"rules\" ref=\"pkgStatusForm\">\n                <el-form-item :label=\"$t('label.taskName')\" label-width=\"230px\" prop=\"taskname\">\n                    <el-input v-model.trim=\"pkgStatusForm.taskname\" autocomplete=\"off\" class=\"max-w-350\" :placeholder=\"$t('linuxPkgControl.installPkgTaskName')\"></el-input>\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"dialogTasknameVisible = false\">{{$t('global.cancel')}}</el-button>\n                <el-button type=\"primary\" @click=\"batchinstallPkg()\">{{$t('global.confirm')}}</el-button>\n            </div>\n        </el-dialog>\n        <div class=\"appStatusCount\" v-show=\"isShowOverview\">\n            <span>{{$t('label.taskName')}} {{linux_taskname}}</span>\n            <span>{{$t('linuxPkgControl.total')}} {{total}}</span>\n            <span>{{$t('linuxPkgControl.deploying')}} {{installing}}</span>\n            <span>{{$t('linuxPkgControl.success')}} {{success}}</span>\n            <span>{{$t('linuxPkgControl.failed')}} {{failed}}</span>\n        </div>\n    </div>\n</template>\n\n<style lang=\"scss\" scoped>\n@import \"@/assets/css/colors.scss\";\n    .pkgStatusContent{\n        position: relative;\n        .appStatusCount{\n            position: absolute;\n            top: 10px;\n            right: 6px;\n            span{\n                font-weight: 500;\n                font-size: 11px;\n                &:nth-child(1){\n                    color: $primary-color;\n                }\n                &:nth-child(2){\n                    border-left: 2px solid #ddd;\n                    padding-left: 3px; \n                    color: $info-color;\n                }\n                &:nth-child(3){\n                    color: $warn-color;\n                }\n                &:nth-child(4){\n                    color: $success-color;\n                }\n                &:nth-child(5){\n                    color: $darkgray-color;\n                }\n            }\n            \n        }\n    }\n\n    .search{\n        position: absolute;\n        top: 3px;\n        right: 15px;\n        width: 230px;\n        z-index: 1001;\n        .search-icon{\n            position: absolute;\n            top: 6px;\n            right: 1px;\n            color: #ddd;\n            z-index: 10001;\n        }\n    }\n    .noData{\n        margin-top: 30px;\n        p{\n            img{\n                width: 27px;\n                vertical-align: middle;\n            }\n            margin-bottom: 20px;\n            color: #bfbfbf;\n            font-size: 21px;\n        }\n    }\n\n</style>\n\n<script>\n    import {linuxPkgControl, androidControl} from '@/assets/js/lwm2mMap'\n    import handleResponse from '@/components/restfulapi/handleResponse'\n    import {showSystemAppArray, disableAppArray} from \"@/assets/js/constant\"\n    import {getRepoLinuxPkgsApi} from '../../../components/restfulapi/getRepoLinuxPackageApi';\n    import{getAppStatusOverviewApi} from \"@/components/restfulapi/appStatusApi\"\n\n    import {getDeviceStatus, setDeviceStatus, batchExecDeviceStatus} from '@/components/restfulapi/deviceStatusApi';\n    import {setLocal, getLocal, getSession, checkSession, setSession} from \"../../../assets/js/storage\"\n    import {returnDownloadServerUrlApi} from \"../../restfulapi/serverConfigApi\"\n\n    import {batchDebType} from \"../../../assets/js/constant\";\n    import pkgHistory from \"./history\"\n    export default{\n        name: 'batchlinuxPkgControl',\n        data(){\n            let validateTaskname = (rule,value,callback)=>{\n                let reg=new RegExp(/^(?![._-\\s])[\\u4E00-\\u9FA5A-Za-z0-9_\\-\\.\\s]{1,12}$/);\n                if(!reg.test(value)){\n                    return callback(new Error (this.$t('global.verifyShortError')))\n                }else{callback()};\n            };\n            return {\n                activeName: \"linuxMarket\",\n                pkgTableData: [],\n\n                defaultImg: 'this.src=\"' + 'static/imgs/default_windows.png' + '\"',\n                dialogTasknameVisible: false,\n                //win package status history\n                productname: '',\n                version: '',\n                address: '',\n                filename: '',\n                type: \"\",\n                //batch installPkg\n                pkgStatusForm:{\n                    taskname: '',\n                },\n                rules:{\n                    taskname: {required: true, validator: validateTaskname, trigger: 'blur'}\n                },\n\n                batchDebType: batchDebType,\n                cid: \"\",\n                disableAppArray: disableAppArray,\n                //installstatus count show\n                isShowOverview: false,\n                linux_taskname: '',\n                success: 0,\n                installing: 0,\n                failed: 0,\n                listLoading: false,\n                keywords: '',\n            }\n        },\n\n        props:{\n            selectedAgentsData: {\n                type: Array,\n                default: []\n            },\n            groupname: {\n                type: String,\n                default: \"\"\n            }, \n            isSingleMode: {\n                type: Boolean,\n                default: true\n            }\n        },\n\n        components: {\n            pkgHistory,\n        },\n\n        methods:{\n            filterType(value, row){\n                return row.type === value ;\n            },\n\n            getSensorStatus(){\n                if(this.isSingleMode) {\n                    console.error(\"Cannot operate in a single mode\");\n                    return;\n                }\n                if(this.selectedAgentsData.length == 0){\n                    console.error(\"getSensorStatus: agentData is null\");\n                    return;\n                }\n                let pkgManagementInfoArray = [];\n                let devicePkgArray = [];\n                this.listLoading = true;\n  \n                getDeviceStatus(this.selectedAgentsData[0].value, linuxPkgControl[\"getPkgInfo\"]).then((obj) => {\n                    this.listLoading = false;\n                    handleResponse(obj, (res) => {\n                        if(res.status == \"CONTENT\"){\n                            if(res.content.value){\n                                let allPkgData = JSON.parse(res.content.value);\n                                if(Object.prototype.toString.call(allPkgData) === \"[object Array]\" && allPkgData.length > 0){\n                                    allPkgData.forEach((val) => {\n                                        let type;\n                                        if(val.pkgtype == \"compressed\"){\n                                            type = \"tar\";\n                                        }else if(val.pkgtype == \"debian\"){\n                                            type = \"deb\";\n                                        }\n                                        let uninstallPkgObj = {\n                                            type: 'uninstall',\n                                            filename: val.pkgname,\n                                            productname: val.appname,\n                                            version: val.version,\n                                            address: val.address,\n                                            filetype: type\n                                        };\n                                        pkgManagementInfoArray.push(uninstallPkgObj);\n                                        devicePkgArray.push(uninstallPkgObj);  \n                                    })\n                                }\n                            }\n                            \n                            this.getRepoPkgs(pkgManagementInfoArray, devicePkgArray);  \n                        } \n                    })   \n                })\n            },\n            \n            // Deletes an object of a particular value in array\n            removeObjInArray(originData, rem_pkg_val){\n                if(Object.prototype.toString.call(originData) === \"[object Array]\"){\n                    originData.forEach((obj_val, index) => {\n                        if(obj_val.productname === rem_pkg_val){\n                            originData.splice(index ,1)\n                        }\n                    })\n                }else{\n                     console.error(\"data is not array\")\n                     return;\n                }\n            },\n            //get repo apps\n            getRepoPkgs(pkgManagementInfoArray, devicePkgArray){\n                if(\n                    Object.prototype.toString.call(pkgManagementInfoArray) != \"[object Array]\" ||\n                    Object.prototype.toString.call(devicePkgArray) != \"[object Array]\"\n                ){\n                    console.error(\"getRepoPkgs　parameter is not array\")\n                    return;\n                }\n                let token;\n                let InstallPkgManagementInfo = {};\n                let UpgradePkgManagementInfo = {};\n                this.listLoading = true;\n                getRepoLinuxPkgsApi().then((data) => {\n                    this.listLoading = false;\n                    handleResponse(data, (res) => {\n                       if(res.status === \"success\"){\n                            if(Object.prototype.toString.call(res.data) === \"[object Array]\"){\n                                res.data.forEach((val) => {\n                                    let version = val.versionName != null ? val.versionName:\"\";\n                                    InstallPkgManagementInfo = {\n                                        type : \"install\", \n                                        filename: val.filename, \n                                        productname: val.productname, \n                                        version: val.version, \n                                        address: val.address,\n                                        filetype: val.type\n                                    };\n                                    pkgManagementInfoArray.push(InstallPkgManagementInfo);\n                                    devicePkgArray.forEach((deviceapp_val, index) => {\n                                        if(deviceapp_val.productname == val.productname){\n                                            // pop latest app info\n                                            pkgManagementInfoArray.pop();\n                                            devicePkgArray[index].address = val.address;\n\n                                            if (_g.cpr_version(val.version, deviceapp_val.version)){  \n                                                UpgradePkgManagementInfo = {\n                                                    type : \"upgrade\", \n                                                    filename: val.filename, \n                                                    productname: val.productname, \n                                                    version: val.version, \n                                                    address: val.address,\n                                                    filetype: val.type\n                                                };\n                                                    //push update app \n                                                pkgManagementInfoArray.push(UpgradePkgManagementInfo);     \n                                                \n                                            }\n                                            \n                                        }\n                                    })\n                                })\n                            }\n                            \n                        }\n                        this.pkgTableData = pkgManagementInfoArray.reverse();\n                    })\n                    \n                })\n            },\n\t\n            //batch install app\n            batchSetAppSensor(cid, setSensorVal){\n                if(linuxPkgControl[cid] === undefined){\n                    this.$swal(\"\", this.$t('global.functionNotSupport'), 'info', {button: this.$t('global.confirm')});\n                    return;\n                }\n                _g.openGlobalLoading();\n                \n                    let pkgdata = {\n                        groupname: this.groupname,\n                        taskname: this.pkgStatusForm.taskname,\n                        productname: this.productname,\n                        type: this.type,\n                        version: this.version,\n                        downloadpath: setSensorVal,\n                    }  \n                    let taskname = this.pkgStatusForm.taskname;\n                    this.dialogTasknameVisible = false;                  \n                    batchExecDeviceStatus(linuxPkgControl[cid], pkgdata).then((data) => {\n                        handleResponse(data, (res) => {\n                            if(res.status == \"CHANGED\"){\n                                //show overview\n                                setLocal(\"linux_taskname\", taskname);\n                                this.activeName = \"winStatusHistory\";\n                                this.$refs.pkgHistory.intervalGetPkgStatusHistory();\n                            }else{\n                                _g.handleError(res);\n                            }\n                        })\n                        \n                    })        \n                \n                               \n            },\n\n            batchinstallPkg(){\n                if(this.selectedAgentsData.length === 0){\n                    this.$swal(\"\", this.$t('global.devicesOffline'),\"info\", {button: this.$t('global.confirm')});\n                    return;\n                }\n                this.$refs.pkgStatusForm.validate((valid) => {\n                    if(valid) {\n                        let apkDownloadAddress = this.address + \"/\" + this.filename;\n                        this.batchSetAppSensor(this.cid, apkDownloadAddress);\n                        \n                    }\n                })\n            },\n            \n            selectBatchinstallPkg(type, selectedAppData){\n                this.cid = type;\n                this.address = selectedAppData.address;\n                this.productname = selectedAppData.productname;\n                this.filename = selectedAppData.filename;\n                this.version = selectedAppData.version;\n                this.type = this.batchDebType;\n                this.pkgStatusForm.taskname = \"\";\n                this.dialogTasknameVisible = true;\n            },\n\n            initPkgInfo(){\n                this.productname = \"\";\n                this.version = \"\";\n                this.address = \"\";\n                this.pkgStatusForm.taskname = \"\";\n                this.cid = \"\";\n                this.type = \"\";\n                this.filename = \"\";\n            },\n\n             //get updatedp status count\n            getBatchAppStatusCount(){\n                let linux_taskname = getLocal(\"linux_taskname\");\n                if(!linux_taskname){\n                    console.error(\"getBatchAppStatusCount:localStorage(linux_taskname) is null\")\n                    this.isShowOverview = false;\n                    return;\n                }\n                getAppStatusOverviewApi(linux_taskname, batchDebType).then((data) => {\n                    handleResponse((data), (res) => {\n                        if(res){\n                            this.linux_taskname = linux_taskname;\n                            this.installing = res.installing;\n                            this.failed = res.fail;\n                            this.success = res.success;\n                            if(this.total > 0 &&  this.activeName === \"winStatusHistory\"){\n                                this.isShowOverview = true;\n                            }else{\n                                this.isShowOverview = false;\n                            }\n                        }\n                    })\n                })\n            },\n            \n            initData(){\n                this.pkgTableData = [];\n            },\n\n            handleClick(tab){\n                if(tab.name === \"winStatusHistory\"){\n                    this.getBatchAppStatusCount();\n                }else{\n                    this.isShowOverview = false;\n                }\n            },\n            isFinished(){\n                this.getSensorStatus();  \n            },\n\n            fileType(value, row){\n                return row.filetype === value ;\n            },\n\n            filterFileType(value, row){\n                return row.filetype === value;\n            },\n\n        },\n       \n        computed: {\n            \n            isShowSearchInput(){\n                if(this.activeName === \"linuxMarket\"){\n                    return true;\n                }else{\n                    return false;\n                }\n            },\n            total(){\n                return  this.success+ this.installing+ this.failed;\n            }\n\n        },\n       \n        watch: {\n            isSingleMode(val){\n                if(!val){\n                    this.initData();\n                }\n            },\n            groupname(val){\n                if(!this.isSingleMode&& val){\n                    this.initData();\n                    this.getSensorStatus();\n                }\n            }\n        }\n\n    }\n</script>\n\n\n// WEBPACK FOOTER //\n// src/components/deploy/linuxcontroldetails/batch.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.isSingleMode),expression:\"!isSingleMode\"}],staticClass:\"pkgStatusContent p-r\"},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isShowSearchInput),expression:\"isShowSearchInput\"}],staticClass:\"search\"},[_c('el-input',{staticClass:\"w-250 m-l-10\",attrs:{\"size\":\"small\",\"placeholder\":_vm.$t('linuxPkgControl.keywordHolder')},model:{value:(_vm.keywords),callback:function ($$v) {_vm.keywords=$$v},expression:\"keywords\"}}),_vm._v(\" \"),_c('i',{staticClass:\"fa fa-search search-icon\",attrs:{\"aria-hidden\":\"true\"}})],1),_vm._v(\" \"),_c('el-tabs',{on:{\"tab-click\":_vm.handleClick},model:{value:(_vm.activeName),callback:function ($$v) {_vm.activeName=$$v},expression:\"activeName\"}},[_c('el-tab-pane',{attrs:{\"name\":\"linuxMarket\"}},[_c('span',{attrs:{\"slot\":\"label\"},slot:\"label\"},[_c('i',{staticClass:\"fa fa-sellsy m-r-5\",attrs:{\"aria-hidden\":\"true\"}}),_vm._v(\"\\n                \"+_vm._s(_vm.$t('linuxPkgControl.pkgMarket'))+\"\\n            \")]),_vm._v(\" \"),_c('el-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.listLoading),expression:\"listLoading\"}],staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.pkgTableData.filter(function (data) { return !_vm.keywords || data.productname.toLowerCase().includes(_vm.keywords.toLowerCase()); }),\"tooltip-effect\":\"dark\",\"header-cell-style\":{background:'#fafafa',color:'#606266'}}},[_c('el-table-column',{attrs:{\"label\":\"\",\"width\":\"100\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[(scope.row.filetype=='deb')?_c('img',{staticStyle:{\"width\":\"52px\"},attrs:{\"src\":require(\"@/assets/imgs/deb.png\"),\"alt\":\"no img\"}}):_vm._e(),_vm._v(\" \"),(scope.row.filetype=='tar')?_c('img',{staticStyle:{\"width\":\"48px\"},attrs:{\"src\":require(\"@/assets/imgs/package.png\"),\"alt\":\"no img\"}}):_vm._e()])]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"filename\",\"label\":_vm.$t('linuxPkgControl.fileName'),\"min-width\":\"120\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"productname\",\"label\":_vm.$t('linuxPkgControl.productName'),\"min-width\":\"120\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"version\",\"label\":_vm.$t('linuxPkgControl.version'),\"min-width\":\"120\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"filetype\",\"label\":_vm.$t('linuxPkgControl.fileType'),\"min-width\":\"120\",\"filters\":[{ text: _vm.$t('linuxPkgControl.debPkg'), value: 'deb' }, { text: _vm.$t('linuxPkgControl.compressPkg'), value: 'tar' }],\"filter-method\":_vm.filterFileType,\"filter-placement\":\"bottom-end\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[(scope.row.filetype == 'deb')?_c('span',[_vm._v(\"\\n                                \"+_vm._s(_vm.$t('linuxPkgControl.debPkg'))+\"\\n                            \")]):_vm._e(),_vm._v(\" \"),(scope.row.filetype == 'tar')?_c('span',[_vm._v(\"\\n                                \"+_vm._s(_vm.$t('linuxPkgControl.compressPkg'))+\"\\n                            \")]):_vm._e()])]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"type\",\"label\":_vm.$t('linuxPkgControl.action'),\"min-width\":\"120\",\"filters\":[{ text: _vm.$t('linuxPkgControl.uninstall'), value: 'uninstall' }, { text: _vm.$t('linuxPkgControl.install'), value: 'install' }, { text: _vm.$t('linuxPkgControl.upgrade'), value: 'upgrade' }],\"filter-method\":_vm.filterType,\"filter-placement\":\"bottom-end\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[_c('span',[_c('el-button-group',[(scope.row.type === 'uninstall')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"danger\"},on:{\"click\":function($event){_vm.selectBatchinstallPkg('uninstall', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('linuxPkgControl.uninstall'))+\"\\n                                    \")]):_vm._e(),_vm._v(\" \"),(scope.row.type === 'upgrade')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"warning\"},on:{\"click\":function($event){_vm.selectBatchinstallPkg('upgrade', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('linuxPkgControl.upgrade'))+\"\\n                                    \")]):_vm._e(),_vm._v(\" \"),(scope.row.type === 'install')?_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"primary\"},on:{\"click\":function($event){_vm.selectBatchinstallPkg('install', scope.row)}}},[_vm._v(\"\\n                                        \"+_vm._s(_vm.$t('linuxPkgControl.install'))+\"\\n                                    \")]):_vm._e()],1)],1)])]}}])})],1)],1),_vm._v(\" \"),_c('el-tab-pane',{attrs:{\"name\":\"winStatusHistory\"}},[_c('span',{attrs:{\"slot\":\"label\"},slot:\"label\"},[_c('i',{staticClass:\"fa fa-history m-r-5\",attrs:{\"aria-hidden\":\"true\"}}),_vm._v(\"\\n                \"+_vm._s(_vm.$t('linuxPkgControl.linuxManagerHistory'))+\"\\n            \")]),_vm._v(\" \"),_c('pkg-history',{ref:\"pkgHistory\",attrs:{\"statusType\":_vm.batchDebType,\"groupname\":_vm.groupname},on:{\"getStatusCount\":_vm.getBatchAppStatusCount,\"isFinished\":_vm.isFinished}})],1)],1),_vm._v(\" \"),_c('el-dialog',{attrs:{\"visible\":_vm.dialogTasknameVisible,\"close-on-click-modal\":false},on:{\"update:visible\":function($event){_vm.dialogTasknameVisible=$event},\"close\":function($event){_vm.initPkgInfo()}}},[_c('div',{staticClass:\"dialog-title\",attrs:{\"slot\":\"title\"},slot:\"title\"},[_c('i',{staticClass:\"fa fa-level-up m-r-10\"}),_vm._v(\"\\n            \"+_vm._s(_vm.$t('linuxPkgControl.batchInstallPkg'))+\"\\n        \")]),_vm._v(\" \"),_c('el-form',{ref:\"pkgStatusForm\",attrs:{\"model\":_vm.pkgStatusForm,\"rules\":_vm.rules}},[_c('el-form-item',{attrs:{\"label\":_vm.$t('label.taskName'),\"label-width\":\"230px\",\"prop\":\"taskname\"}},[_c('el-input',{staticClass:\"max-w-350\",attrs:{\"autocomplete\":\"off\",\"placeholder\":_vm.$t('linuxPkgControl.installPkgTaskName')},model:{value:(_vm.pkgStatusForm.taskname),callback:function ($$v) {_vm.$set(_vm.pkgStatusForm, \"taskname\", (typeof $$v === 'string'? $$v.trim(): $$v))},expression:\"pkgStatusForm.taskname\"}})],1)],1),_vm._v(\" \"),_c('div',{staticClass:\"dialog-footer\",attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('el-button',{on:{\"click\":function($event){_vm.dialogTasknameVisible = false}}},[_vm._v(_vm._s(_vm.$t('global.cancel')))]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":function($event){_vm.batchinstallPkg()}}},[_vm._v(_vm._s(_vm.$t('global.confirm')))])],1)],1),_vm._v(\" \"),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isShowOverview),expression:\"isShowOverview\"}],staticClass:\"appStatusCount\"},[_c('span',[_vm._v(_vm._s(_vm.$t('label.taskName'))+\" \"+_vm._s(_vm.linux_taskname))]),_vm._v(\" \"),_c('span',[_vm._v(_vm._s(_vm.$t('linuxPkgControl.total'))+\" \"+_vm._s(_vm.total))]),_vm._v(\" \"),_c('span',[_vm._v(_vm._s(_vm.$t('linuxPkgControl.deploying'))+\" \"+_vm._s(_vm.installing))]),_vm._v(\" \"),_c('span',[_vm._v(_vm._s(_vm.$t('linuxPkgControl.success'))+\" \"+_vm._s(_vm.success))]),_vm._v(\" \"),_c('span',[_vm._v(_vm._s(_vm.$t('linuxPkgControl.failed'))+\" \"+_vm._s(_vm.failed))])])],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?{\"id\":\"data-v-2fa08720\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&index=0!./src/components/deploy/linuxcontroldetails/batch.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-2fa08720\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=styles&index=0!./batch.vue\")\n}\nvar normalizeComponent = require(\"!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./batch.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./batch.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-2fa08720\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=template&index=0!./batch.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-2fa08720\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/deploy/linuxcontroldetails/batch.vue\n// module id = null\n// module chunks = ","<template>\n    <div class=\"content-box\">\n        <div class=\"title-box\">\n            <p class=\"header-line\">\n                <i class=\"fa fa-sliders m-r-10\" ></i>\n                {{$t('linuxPkgControl.pkgDeploy')}}\n                \n            </p>\n        </div>\n\n        <div class=\"select-box\">\n            <mode-switch @mode-status=\"changeMode\" ></mode-switch>\n            <span class=\"vertical\"></span>\n            <select-group \n            @select-getDeviceOptions=\"getGroupOption\" \n            @select-getGroupName=\"getGroupName\" \n            :isSingleMode=\"isSingleMode\"\n            :groupType=\"groupTypeArray\">\n            </select-group>\n            <select-device \n            @select-device=\"getDeviceOption\"\n            @isOfflineDev=\"isOfflineDev\" \n            :isSingleMode=\"isSingleMode\"\n            :isDisabledOffDev=\"isDisabledOffDev\"\n            :groupType=\"groupType\">\n            </select-device>\n        </div>\n        <div class=\"table-box\" >\n            <single-control \n            :selectedAgentId=\"selectedAgentId\" \n            :isSingleMode=\"isSingleMode\"\n            @isDisabled=\"isDisabled\"\n            :isOffline=\"isOffline\">\n            </single-control>\n            <batch-control \n            :selectedAgentsData=\"selectedAgentsData\" \n            :isSingleMode=\"isSingleMode\"\n            :groupname=\"groupname\"\n            >\n            </batch-control>\n        </div>\n    </div>\n</template>\n<style lang=\"scss\" scoped>\n@import \"../../assets/css/colors\"; \n    \n\n</style>\n<script>\n    import selectDevice from '../../common/select-device'\n    import modeSwitch from \"../../common/mode-switch\"\n    import selectGroup from \"../../common/select-group\"\n    import singleControl from \"./linuxcontroldetails/single\"\n    import batchControl from \"./linuxcontroldetails/batch\"\n    import {groupType} from \"../../assets/js/constant\"\n\n    export default{\n        name: 'controlAppcontrol',\n        data(){\n            return {\n                selectedAgentId: '',\n                selectedAgentsData: [],\n                isSingleMode: true,\n                groupname: '',\n                //offline device is disabled\n                isDisabledOffDev: true,\n                //selectedAgent is offline\n                isOffline: false,\n                groupType: groupType.linux,\n                groupTypeArray: [groupType.linux]\n            }\n        },\n        components:{\n            selectDevice,\n            selectGroup,\n            modeSwitch,\n            singleControl,\n            batchControl\n        },\n        methods:{\n\n            getDeviceOption(selectedAgentId){ \n                this.selectedAgentId = selectedAgentId;\n            },\n\n            getGroupOption(selectedAgentsData){\n                this.selectedAgentsData = selectedAgentsData;\n            },\n\n            initData(){\n                this.selectedAgentId = \"\";\n                this.groupname = \"\";\n                this.selectedAgentsData = [];\n            },\n\n            changeMode(val){\n                this.initData();\n                this.isSingleMode = !val\n            },\n\n            getGroupName(groupname){\n                this.groupname = groupname;\n            },\n\n            isDisabled(value){\n                this.isDisabledOffDev = value;\n            },\n            isOfflineDev(value){\n                this.isOffline = value\n            }\n            \n        },\n\n    }\n</script>\n\n\n\n\n\n// WEBPACK FOOTER //\n// src/components/deploy/linuxcontrol.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content-box\"},[_c('div',{staticClass:\"title-box\"},[_c('p',{staticClass:\"header-line\"},[_c('i',{staticClass:\"fa fa-sliders m-r-10\"}),_vm._v(\"\\n            \"+_vm._s(_vm.$t('linuxPkgControl.pkgDeploy'))+\"\\n            \\n        \")])]),_vm._v(\" \"),_c('div',{staticClass:\"select-box\"},[_c('mode-switch',{on:{\"mode-status\":_vm.changeMode}}),_vm._v(\" \"),_c('span',{staticClass:\"vertical\"}),_vm._v(\" \"),_c('select-group',{attrs:{\"isSingleMode\":_vm.isSingleMode,\"groupType\":_vm.groupTypeArray},on:{\"select-getDeviceOptions\":_vm.getGroupOption,\"select-getGroupName\":_vm.getGroupName}}),_vm._v(\" \"),_c('select-device',{attrs:{\"isSingleMode\":_vm.isSingleMode,\"isDisabledOffDev\":_vm.isDisabledOffDev,\"groupType\":_vm.groupType},on:{\"select-device\":_vm.getDeviceOption,\"isOfflineDev\":_vm.isOfflineDev}})],1),_vm._v(\" \"),_c('div',{staticClass:\"table-box\"},[_c('single-control',{attrs:{\"selectedAgentId\":_vm.selectedAgentId,\"isSingleMode\":_vm.isSingleMode,\"isOffline\":_vm.isOffline},on:{\"isDisabled\":_vm.isDisabled}}),_vm._v(\" \"),_c('batch-control',{attrs:{\"selectedAgentsData\":_vm.selectedAgentsData,\"isSingleMode\":_vm.isSingleMode,\"groupname\":_vm.groupname}})],1)])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?{\"id\":\"data-v-748c7278\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&index=0!./src/components/deploy/linuxcontrol.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-748c7278\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=styles&index=0!./linuxcontrol.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./linuxcontrol.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./linuxcontrol.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-748c7278\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=template&index=0!./linuxcontrol.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-748c7278\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/deploy/linuxcontrol.vue\n// module id = null\n// module chunks = ","import {repoApiGet} from '@/assets/js/baseApi'\nimport {getRepoServerApi} from \"../restfulapi/serverConfigApi\"\n\nlet getRepoLinuxPkgsApi = function(){\n    return new Promise((resolve, reject) => {\n        getRepoServerApi().then((repoUrl) => {\n            let getRepoLinuxPkgUrl =  repoUrl + \"/repoLinuxPkg\";\n            repoApiGet(getRepoLinuxPkgUrl, \"\").then((data) => {\n                resolve(data);\n            }).catch((error) => {\n                resolve(error.response);\n            })\n        })\n    })\n}\n\nexport {\n    getRepoLinuxPkgsApi,\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/restfulapi/getRepoLinuxPackageApi.js"],"sourceRoot":""}