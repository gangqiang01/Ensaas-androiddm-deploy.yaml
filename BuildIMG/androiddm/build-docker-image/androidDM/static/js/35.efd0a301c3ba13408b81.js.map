{"version":3,"sources":["webpack:///src/components/dockercontrol/dockermonitor.vue","webpack:///./src/components/dockercontrol/dockermonitor.vue?b473","webpack:///./src/components/dockercontrol/dockermonitor.vue"],"names":["dockermonitor","name","data","containername","selectedAgentId","processTableData","containerId","cpuData","Array","memoryData","limitMemoryData","networkRXData","networkTXData","intervalTime","monitorLoading","memoryLoading","networkLoading","processLoading","methods","getTimeOptions","options","date","Date","time","Hours","getHours","Min","getMinutes","Sec","getSeconds","i","unshift","this","getSensorStatus","cid","_this","Object","deviceStatusApi","lwm2mMap","then","handleResponse","res","memory","limitMemory","cpuNowPercentage","networkRX","networkTX","containerInfo","JSON","parse","content","value","cpuusage","push","shift","drawCpuChart","parseInt","memusage","toFixed","memlimited","drawMemoryChart","RxBytes","TxBytes","drawNetWorkChart","processData","Processes","forEach","obj","uid","pid","ppid","c","stime","tty","cmd","console","error","log","nvalue","_g","max","RXLegend","TXLegend","option","legend","xAxis","type","axisLabel","interval","rotate","yAxis","min","series","networkChart","$echarts","init","document","getElementById","setOption","cpuLegend","cpuChart","mvalue","memoryLegend","limitMemoryLegend","memoryChart","startDeviceMonitor","_this2","mtimer","window","setInterval","stopDeviceMonitor","clearInterval","actionContainerSensor","_this3","undefined","pkgname","version","taskname","target","swalWarnDo","$t","willfunc","openGlobalLoading","stringify_default","status","$swal","button","handleError","back","$router","go","created","$route","query","endpoint","mounted","beforeDestroy","dockercontrol_dockermonitor","render","_vm","_h","$createElement","_c","_self","staticClass","attrs","aria-hidden","on","click","$event","_v","_s","span","id","directives","rawName","expression","staticStyle","width","tooltip-effect","prop","label","min-width","size","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/35.efd0a301c3ba13408b81.js","sourcesContent":["<template>\n    <div>\n        <div class=\"title\">\n            <p class=\"header-line\">\n                <i class=\"fa fa-arrow-left m-r-10 pointer\" aria-hidden=\"true\" @click=\"back()\"></i>\n                {{containername}}\n            </p>\n        </div>\n        <div class=\"content\">\n            <el-col :span=\"20\">\n                <div class=\"box-card cf m-r-10\">\n                    <div class=\"convas\" id=\"cpuchart\"></div>       \n                    <div class=\"convas\" id=\"memorychart\"></div>\n                    <div class=\"convas\" id=\"networkchart\"></div>\n                </div>\n                <div class=\"process-content box-card m-r-10\">\n                    <el-table\n                        :data=\"processTableData\"\n                        tooltip-effect=\"dark\"\n                        style=\"width: 100%\"\n                        v-loading=\"processLoading\">\n                        <el-table-column\n                        prop=\"uid\"\n                        label=\"UID\"\n                        min-width=\"120\"\n                        >\n                        </el-table-column>\n                        <el-table-column\n                        prop=\"pid\"\n                        label=\"PID\"\n                        min-width=\"120\">\n                        </el-table-column>\n                        <el-table-column\n                        prop=\"ppid\"\n                        label=\"PPID\"\n                        min-width=\"120\">\n                        </el-table-column>\n                        <el-table-column\n                            prop=\"c\"\n                            label=\"C\"\n                            min-width=\"100\">\n                        </el-table-column>\n                        <el-table-column\n                            prop=\"stime\"\n                            label=\"STIME\"\n                            min-width=\"100\">\n                        </el-table-column>\n                        <el-table-column\n                            prop=\"tty\"\n                            label=\"TTY\"\n                            min-width=\"100\">\n                        </el-table-column>\n                        <el-table-column\n                            prop=\"time\"\n                            label=\"Time\"\n                            min-width=\"100\">\n                        </el-table-column>\n                        <el-table-column\n                            prop=\"cmd\"\n                            label=\"CMD\"\n                            min-width=\"100\">\n                        </el-table-column>\n                    </el-table>\n                </div>\n            </el-col>\n            <el-col :span=\"4\">\n                <div class=\"action box-card\">\n                    <p>{{$t('global.action')}}</p>\n                    <p>\n                        <el-button size=\"mini\" @click=\"actionContainerSensor('restartContainer')\">{{$t('global.restart')}}</el-button>\n                    </p>\n                    <p>\n                        <el-button size=\"mini\" @click=\"actionContainerSensor('stopContainer')\">{{$t('global.stop')}}</el-button>\n                    </p>\n                </div>\n            </el-col>     \n        </div>   \n    </div>\n</template>\n<style lang=\"scss\" scoped>\n@import \"../../assets/css/colors\";\n    .content{\n        .convas{\n            display: inline-block;\n            width: 33%;\n            height: 280px;\n        }\n        \n        .process-content{\n            margin-top: 20px;\n        }\n    } \n    .action{\n        background: #fff;\n        padding: 5px 20px;\n        font-size: 20px;\n        color: #1382c6;\n        font-weight: bolder;\n        text-align: center;\n        p{\n            margin: 10px 0;\n        }\n        button{\n            width: 150px;\n            border-color: #1382c6;\n            border-width: 2px;\n            color:#1382c6;\n            font-weight: bold; \n        }\n    }\n</style>\n<script>\n    import {dockerAction} from '@/assets/js/lwm2mMap'\n    import handleResponse from '@/components/restfulapi/handleResponse'\n    import {getDeviceStatus, setDeviceStatus, execDeviceStatus} from '@/components/restfulapi/deviceStatusApi';\n\n    export default{\n        name: 'containerMonitor',\n        data(){\n            return {\n                containername: \"\",\n                selectedAgentId: \"\",\n                processTableData: [],\n                containerId: \"\",\n\n                cpuData: new Array(7),\n                memoryData: new Array(7),\n                limitMemoryData: new Array(7),\n                networkRXData: new Array(7),\n                networkTXData: new Array(7),\n                intervalTime: \"5\",\n\n                monitorLoading: false,\n                memoryLoading: false,\n                networkLoading: false,\n                processLoading: false\n\n            }\n        },\n        \n        methods:{\n            getTimeOptions(){\n                let options=[];\n                let date = new Date();\n                let time = \"\";\n                let Hours =  date.getHours();\n                if(Hours<10) Hours = \"0\"+Hours;\n                let Min = date.getMinutes();\n                if(Min<10) Min = \"0\"+Min;\n                let Sec =  date.getSeconds();\n                if(Sec<10) Sec = \"0\"+Sec;\n                for (let i=0;i<=6;i++){\n                    time =  Hours+\":\"+Min+\":\"+Sec;\n                    options.unshift(time)\n                    Sec = Sec - this.intervalTime;\n                    if(Sec<10&&0<=Sec){\n                        Sec = \"0\"+Sec;\n                    }else if(Sec<0){\n                        Sec=60+Sec;\n                        Min--;\n                        if(Min<10){\n                            Min = \"0\"+Min;\n                        }\n                    }\n                }\n                return options;\n            },\n           \n            getSensorStatus(cid, selectedAgentId, containerId){\n                if(!selectedAgentId){\n                    console.error(\"selectedAgentId is null\");\n                    return;\n                }\n                let data = {};\n                if(containerId){\n                    data.containerId = containerId;\n                }\n                // this.monitorLoading = true;\n                if(cid == \"getContainerProcess\"){\n                    this.processLoading = true;\n                }\n                getDeviceStatus(selectedAgentId, dockerAction[cid], data).then((data) => {\n                    if(cid == \"getContainerProcess\"){\n                        this.processLoading = false;\n                    }\n\n                    handleResponse(data, (res) => {\n                        if(cid == \"containerMonitor\"){\n                            let memory = 0, limitMemory=  0, cpuNowPercentage = 0, networkRX= 0, networkTX= 0;\n                            let containerInfo = JSON.parse(res.content.value);\n                            cpuNowPercentage = containerInfo.cpuusage;\n                            this.cpuData.push(cpuNowPercentage);\n                            this.cpuData.shift();\n                            this.drawCpuChart(cpuNowPercentage);\n\n                            memory =(parseInt(containerInfo.memusage)/1024).toFixed(2);\n                            limitMemory = (parseInt(containerInfo.memlimited)/1024).toFixed(2);\n                            this.memoryData.push(memory);\n                            this.memoryData.shift();\n                            this.limitMemoryData.push(limitMemory);\n                            this.limitMemoryData.shift();\n                            // console.log(this.memoryData)\n                            this.drawMemoryChart(memory, limitMemory);\n\n                            networkRX =(parseInt(containerInfo.RxBytes)/1024).toFixed(2);\n                            networkTX =(parseInt(containerInfo.TxBytes)/1024).toFixed(2);\n                            this.networkRXData.push(networkRX);\n                            this.networkRXData.shift();\n                            this.networkTXData.push(networkTX);\n                            this.networkTXData.shift();\n                            \n                            this.drawNetWorkChart(networkRX, networkTX);\n                        }else if(cid == \"getContainerProcess\"){\n                            let processData = JSON.parse(res.content.value).Processes;\n                            this.processTableData = [];\n                            processData.forEach((value) => {\n                                // UID\",\"PID\",\"PPID\",\"C\",\"STIME\",\"TTY\",\"TIME\",\"CMD\"\n                                let obj = {};\n                                obj.uid = value[0];\n                                obj.pid = value[1];\n                                obj.ppid = value[2];\n                                obj.c = value[3];\n                                obj.stime = value[4];\n                                obj.tty = value[5];\n                                obj.time = value[6];\n                                obj.cmd = value[7];\n                                this.processTableData.push(obj)\n\n                            })\n                            \n\n                        }\n                    })\n                })\n            },\n\n            drawNetWorkChart(networkRX, networkTX){\n                console.log(networkRX, networkTX)\n                let nvalue = _g.max(networkRX, networkTX);\n                let RXLegend = \"RX(\"+networkRX+\"M)\"\n                let TXLegend = 'TX('+networkTX+\"M)\"\n                nvalue = parseInt(nvalue/10)*10+20;\n               \n                let labelOptions = this.getTimeOptions();\n                let option = {\n                    legend: {\n                        data: [RXLegend, TXLegend]\n                    },\n                    xAxis: {\n                        type: 'category',\n                        axisLabel: {\n                            interval: 0,\n                            rotate:30 \n                        },\n                        data: labelOptions\n                    },\n                    yAxis: {\n                        type: 'value',\n                        max: nvalue,\n                        min: 0,\n                        interval: nvalue/10\n                    },\n                    series: [{\n                        name: RXLegend,\n                        data: this.networkRXData,\n                        type: 'line'\n                    },\n                    {\n                        name: TXLegend,\n                        data: this.networkTXData,\n                        type: 'line'\n                    }]\n                };\n\n                this.networkChart = this.$echarts.init(document.getElementById(\"networkchart\"));\n                this.networkChart.setOption(option)\n            },\n\n\n            drawCpuChart(cpuNowPercentage){\n                let labelOptions = this.getTimeOptions();\n                let cpuLegend = 'CPU Usage('+cpuNowPercentage+\"%)\"\n                let option = {\n                    legend: {\n                        data: [cpuLegend]\n                    },\n                    xAxis: {\n                        type: 'category',\n                        axisLabel: {\n                            interval: 0,\n                            rotate:30 \n                        },\n                        data: labelOptions\n                    },\n                    yAxis: {\n                        type: 'value',\n                        max: 100,\n                        min: 0,\n                        interval: 10\n                    },\n                    series: [{\n                        name: cpuLegend,\n                        data: this.cpuData,\n                        type: 'line'\n                    }]\n                };\n\n                this.cpuChart = this.$echarts.init(document.getElementById(\"cpuchart\"));\n                this.cpuChart.setOption(option)\n            },\n\n            drawMemoryChart(memory, limitMemory){\n                console.log(this.memoryData)\n                let mvalue = _g.max(memory, limitMemory);\n                mvalue = parseInt(mvalue/100)*100+200;\n                let labelOptions = this.getTimeOptions();\n                let memoryLegend = \"Memory(\"+memory+\"M)\"\n                let limitMemoryLegend = 'Limit Memory('+limitMemory+\"M)\"\n                let option = {\n                    \n                    legend: {\n                        data: [memoryLegend, limitMemoryLegend]\n                    },\n                    xAxis: {\n                        type: 'category',\n                        axisLabel: {\n                            interval: 0,  \n                            rotate:30  \n                        },\n                        data: labelOptions\n                    },\n                    yAxis: {\n                        type: 'value',\n                        max: mvalue,\n                        min: 0,\n                        interval: mvalue/10\n                    },\n                    series: [{\n                        name: memoryLegend,\n                        data: this.memoryData,\n                        type: 'line'\n                    },\n                    {\n                        name: limitMemoryLegend,\n                        data: this.limitMemoryData,\n                        type: 'line'\n                    }]\n                };\n\n                this.memoryChart = this.$echarts.init(document.getElementById(\"memorychart\"));\n                this.memoryChart.setOption(option);\n \n            },\n\n            startDeviceMonitor(selectedAgentId, containerId){\n\n                this.getSensorStatus(\"getContainerProcess\", selectedAgentId, containerId);\n                this.getSensorStatus(\"containerMonitor\", selectedAgentId, containerId);\n                if(_g.mtimer == null){\n                    _g.mtimer = window.setInterval(() => {\n                        this.getSensorStatus(\"containerMonitor\", selectedAgentId, containerId);\n                    }, this.intervalTime*1000)\n                }\n            },\n            \n            stopDeviceMonitor(){\n                window.clearInterval(_g.mtimer);\n                _g.mtimer = null;\n            },\n\n            actionContainerSensor(cid){\n                if(dockerAction[cid] === undefined){\n                    this.$swal(\"\", this.$t('global.functionNotSupport'), 'info', {button: this.$t('global.confirm')});\n                    return;\n                }\n\n                if(this.selectedAgentId == ''){\n                    this.$swal(\"\",this.$t('global.selectDevice'),\"info\", {button: this.$t('global.confirm')})\n                    return;\n                }\n                let obj = {};\n                obj.pkgname = this.containername;\n                obj.version = this.containerId;\n                obj.taskname = \"###\";\n                obj.target = dockerAction[cid];\n                _g.swalWarnDo(this.$t('global.areYouSure'), this.$t(\"dockerAction.\"+cid), this.$t('global.confirm'), this.$t('global.cancel')).then((willfunc) => {\n                    if (willfunc) {\n                        _g.openGlobalLoading();\n                        setDeviceStatus(this.selectedAgentId, dockerAction[cid], JSON.stringify(obj)).then((data) => {\n                            handleResponse(data, (res) => {\n                                if(res.status == \"CHANGED\"){\n                                    this.$swal(\"\",this.$t('global.success'),\"success\", {button: this.$t('global.confirm')}).then(() => {\n                                        this.startDeviceMonitor(this.selectedAgentId, this.containerId);                        \n                                    })\n                                }else{\n                                    _g.handleError(res);\n                                }\n                            })\n                        })\n                    }\n                })\n            },  \n\n            back(){\n                this.$router.go(-1);\n            }\n        },\n\n        created(){\n            console.log(this.$route.query);\n            if(this.$route.query.name&& this.$route.query.endpoint){\n                this.containername = this.$route.query.name;\n                this.selectedAgentId = this.$route.query.endpoint;\n                this.containerId = this.$route.query.containerId;\n    \n                this.startDeviceMonitor(this.selectedAgentId, this.containerId);\n            }\n        },\n        mounted() {\n            this.drawMemoryChart(0, 0);\n            this.drawCpuChart(0);\n            this.drawNetWorkChart(0, 0);\n        },\n\n        beforeDestroy(){\n            this.stopDeviceMonitor();\n        },\n\n        \n\n    }\n</script>\n\n\n\n\n\n// WEBPACK FOOTER //\n// src/components/dockercontrol/dockermonitor.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"title\"},[_c('p',{staticClass:\"header-line\"},[_c('i',{staticClass:\"fa fa-arrow-left m-r-10 pointer\",attrs:{\"aria-hidden\":\"true\"},on:{\"click\":function($event){_vm.back()}}}),_vm._v(\"\\n            \"+_vm._s(_vm.containername)+\"\\n        \")])]),_vm._v(\" \"),_c('div',{staticClass:\"content\"},[_c('el-col',{attrs:{\"span\":20}},[_c('div',{staticClass:\"box-card cf m-r-10\"},[_c('div',{staticClass:\"convas\",attrs:{\"id\":\"cpuchart\"}}),_vm._v(\" \"),_c('div',{staticClass:\"convas\",attrs:{\"id\":\"memorychart\"}}),_vm._v(\" \"),_c('div',{staticClass:\"convas\",attrs:{\"id\":\"networkchart\"}})]),_vm._v(\" \"),_c('div',{staticClass:\"process-content box-card m-r-10\"},[_c('el-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.processLoading),expression:\"processLoading\"}],staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.processTableData,\"tooltip-effect\":\"dark\"}},[_c('el-table-column',{attrs:{\"prop\":\"uid\",\"label\":\"UID\",\"min-width\":\"120\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"pid\",\"label\":\"PID\",\"min-width\":\"120\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"ppid\",\"label\":\"PPID\",\"min-width\":\"120\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"c\",\"label\":\"C\",\"min-width\":\"100\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"stime\",\"label\":\"STIME\",\"min-width\":\"100\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"tty\",\"label\":\"TTY\",\"min-width\":\"100\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"time\",\"label\":\"Time\",\"min-width\":\"100\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"cmd\",\"label\":\"CMD\",\"min-width\":\"100\"}})],1)],1)]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":4}},[_c('div',{staticClass:\"action box-card\"},[_c('p',[_vm._v(_vm._s(_vm.$t('global.action')))]),_vm._v(\" \"),_c('p',[_c('el-button',{attrs:{\"size\":\"mini\"},on:{\"click\":function($event){_vm.actionContainerSensor('restartContainer')}}},[_vm._v(_vm._s(_vm.$t('global.restart')))])],1),_vm._v(\" \"),_c('p',[_c('el-button',{attrs:{\"size\":\"mini\"},on:{\"click\":function($event){_vm.actionContainerSensor('stopContainer')}}},[_vm._v(_vm._s(_vm.$t('global.stop')))])],1)])])],1)])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?{\"id\":\"data-v-24d75a2a\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&index=0!./src/components/dockercontrol/dockermonitor.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-24d75a2a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=styles&index=0!./dockermonitor.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./dockermonitor.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./dockermonitor.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-24d75a2a\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=template&index=0!./dockermonitor.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-24d75a2a\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/dockercontrol/dockermonitor.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}